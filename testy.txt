

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>
#include <setjmp.h>
#include <assert.h>

#if !defined(__clang__) && !defined(__GNUC__)
// Zakomentuj poniższy błąd, jeżeli chcesz przetestować testy na swoim kompilatorze C.
#error System testow jednostkowych jest przeznaczony dla kompilatorów GCC/Clang.
#endif

#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__)
// Zakomentuj poniższy błąd, jeżeli chcesz przetestować testy na platformie Windows.
#error System testow jednostkowych NIE jest przeznaczony dla testów uruchamianych na platformach Windows.
#endif

#define _RLDEBUG_API_
#include "unit_helper_v2.h"
#include "rdebug.h"

#include "tested_declarations.h"
#include "rdebug.h"

//
// Elementy globalne dla całego testu
//




//
//  Test 1: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
//
void UTEST1(void)
{
    // informacje o teście
    test_start(1, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(67);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"EVENTUALLY", "X", "I", "S", "T"};

                int err_code = create_leading_word_cross("EXIST", "EVENTUALLY", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!5)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 5; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 5) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 2: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 104 bajtów
//
void UTEST2(void)
{
    // informacje o teście
    test_start(2, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 104 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(104);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"IWJRTINBZSU", "         H", "         A", "         K", "         E"};

                int err_code = create_leading_word_cross("SHAKE", "IWJRTINBZSU", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!5)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 5; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 5) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 3: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 103 bajtów
//
void UTEST3(void)
{
    // informacje o teście
    test_start(3, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 103 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(103);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"         G", "         R", "         A", "         D", "IMPOSSIBLE"};

                int err_code = create_leading_word_cross("GRADE", "IMPOSSIBLE", &output);
                test_error(err_code == 4, "Funkcja create_leading_word_cross() powinna zwrócić 4, a zwróciła %d", err_code);        

                if (!5)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 5; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 5) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 4: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
//
void UTEST4(void)
{
    // informacje o teście
    test_start(4, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(67);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"C", "R", "I", "M", "EVERYTHING"};

                int err_code = create_leading_word_cross("CRIME", "EVERYTHING", &output);
                test_error(err_code == 4, "Funkcja create_leading_word_cross() powinna zwrócić 4, a zwróciła %d", err_code);        

                if (!5)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 5; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 5) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 5: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 71 bajtów
//
void UTEST5(void)
{
    // informacje o teście
    test_start(5, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 71 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(71);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {" C", "ELEMENTARY", " A", " S", " S"};

                int err_code = create_leading_word_cross("CLASS", "ELEMENTARY", &output);
                test_error(err_code == 1, "Funkcja create_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!5)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 5; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 5) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 6: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów
//
void UTEST6(void)
{
    // informacje o teście
    test_start(6, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(18);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"A"};

                int err_code = create_leading_word_cross("A", "A", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 7: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
//
void UTEST7(void)
{
    // informacje o teście
    test_start(7, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(25);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"ADVANCED"};

                int err_code = create_leading_word_cross("A", "ADVANCED", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 8: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
//
void UTEST8(void)
{
    // informacje o teście
    test_start(8, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(25);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"RELIGION"};

                int err_code = create_leading_word_cross("N", "RELIGION", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 9: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
//
void UTEST9(void)
{
    // informacje o teście
    test_start(9, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(25);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"COLLAPSE"};

                int err_code = create_leading_word_cross("A", "COLLAPSE", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 10: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
//
void UTEST10(void)
{
    // informacje o teście
    test_start(10, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(179);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"LM", "A", "L", "V", "U", "C", "A", "L", "L", "G", "I", "J", "O", "N", "C", "Q", "C"};

                int err_code = create_leading_word_cross("LALVUCALLGIJONCQC", "LM", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 17) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 11: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
//
void UTEST11(void)
{
    // informacje o teście
    test_start(11, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(179);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"D", "A", "M", "O", "E", "Y", "A", "Q", "E", "N", "R", "S", "A", "D", "J", "PP", "I"};

                int err_code = create_leading_word_cross("DAMOEYAQENRSADJPI", "PP", &output);
                test_error(err_code == 15, "Funkcja create_leading_word_cross() powinna zwrócić 15, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 17) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 12: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
//
void UTEST12(void)
{
    // informacje o teście
    test_start(12, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(179);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"V", "J", "B", "R", "L", "D", "Y", "X", "V", "R", "T", "U", "I", "P", "OH", "Z", "P"};

                int err_code = create_leading_word_cross("VJBRLDYXVRTUIPOZP", "OH", &output);
                test_error(err_code == 14, "Funkcja create_leading_word_cross() powinna zwrócić 14, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 17) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 13: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 84 bajtów
//
void UTEST13(void)
{
    // informacje o teście
    test_start(13, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 84 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(84);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"IOIGLYP", "V", "N", "L", "I", "S", "A"};

                int err_code = create_leading_word_cross("IVNLISA", "IOIGLYP", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!7)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 7; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 7) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 14: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 109 bajtów
//
void UTEST14(void)
{
    // informacje o teście
    test_start(14, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 109 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(109);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"    A", "    R", "PXQPMXMD", "    T", "    B", "    D", "    M"};

                int err_code = create_leading_word_cross("ARMTBDM", "PXQPMXMD", &output);
                test_error(err_code == 2, "Funkcja create_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!7)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 7; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 7) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 15: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 46 bajtów
//
void UTEST15(void)
{
    // informacje o teście
    test_start(15, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 46 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(46);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"TLRQTQKEY", "H", "T"};

                int err_code = create_leading_word_cross("THT", "TLRQTQKEY", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!3)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 3; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 3) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 16: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 49 bajtów
//
void UTEST16(void)
{
    // informacje o teście
    test_start(16, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 49 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(49);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"RAJNAJCNDN", " A", " W"};

                int err_code = create_leading_word_cross("AAW", "RAJNAJCNDN", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!3)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 3; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 3) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 17: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów
//
void UTEST17(void)
{
    // informacje o teście
    test_start(17, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(130);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"NNB", "R", "G", "P", "S", "B", "J", "A", "A", "V", "C", "N"};

                int err_code = create_leading_word_cross("NRGPSBJAAVCN", "NNB", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!12)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 12; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 12) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 18: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST18(void)
{
    // informacje o teście
    test_start(18, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(131);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"R", "E", "V", "I", "E", "WTFW", "Z", "W", "N", "N", "A", "H"};

                int err_code = create_leading_word_cross("REVIEWZWNNAH", "WTFW", &output);
                test_error(err_code == 5, "Funkcja create_leading_word_cross() powinna zwrócić 5, a zwróciła %d", err_code);        

                if (!12)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 12; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 12) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 19: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST19(void)
{
    // informacje o teście
    test_start(19, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(131);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("PRINCIPLE", "BOTTOM", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 20: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST20(void)
{
    // informacje o teście
    test_start(20, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(131);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("INDIVIDUAL", "T", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 21: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST21(void)
{
    // informacje o teście
    test_start(21, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(131);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("I", "LANGUAGE", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 22: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST22(void)
{
    // informacje o teście
    test_start(22, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(131);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("HTXJLTWTGWOSUGPN", "RZIAFVZCMMBQBKRM", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 23: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST23(void)
{
    // informacje o teście
    test_start(23, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("LOWHXUGKQCVWEXNZC", "brbdmcclovszgzulx", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 24: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST24(void)
{
    // informacje o teście
    test_start(24, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("lowhxugkqcvwexnzc", "BRBDMCCLOVSZGZULX", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 25: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST25(void)
{
    // informacje o teście
    test_start(25, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("LOWHXUGKQCVWEXNZC", "BRBDMCCLOVSZGZULX\n", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 26: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST26(void)
{
    // informacje o teście
    test_start(26, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("LOWHXUGKQCVWEXNZC\n", "BRBDMCCLOVSZGZULX", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 27: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST27(void)
{
    // informacje o teście
    test_start(27, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("LOWHXUGKQChVWEXNZC", "BRBDMCCLOVSZGZULX", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 28: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
//
void UTEST28(void)
{
    // informacje o teście
    test_start(28, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("LOWHXUGKQCVWEXNZC", "BRBDMCCLOVSZGZbULX", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 29: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
//
void UTEST29(void)
{
    // informacje o teście
    test_start(29, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 30: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów
//
void UTEST30(void)
{
    // informacje o teście
    test_start(30, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(64);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 31: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
//
void UTEST31(void)
{
    // informacje o teście
    test_start(31, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(67);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 32: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 70 bajtów
//
void UTEST32(void)
{
    // informacje o teście
    test_start(32, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 70 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(70);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 33: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 73 bajtów
//
void UTEST33(void)
{
    // informacje o teście
    test_start(33, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 73 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(73);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 34: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 76 bajtów
//
void UTEST34(void)
{
    // informacje o teście
    test_start(34, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 76 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(76);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 35: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów
//
void UTEST35(void)
{
    // informacje o teście
    test_start(35, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(79);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 36: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST36(void)
{
    // informacje o teście
    test_start(36, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(88);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 37: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST37(void)
{
    // informacje o teście
    test_start(37, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross("COURAGE", "HGDYOWBA", NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 38: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST38(void)
{
    // informacje o teście
    test_start(38, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross("COURAGE", NULL, &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 39: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST39(void)
{
    // informacje o teście
    test_start(39, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross(NULL, "HGDYOWBA", &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 40: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST40(void)
{
    // informacje o teście
    test_start(40, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross(NULL, NULL, &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 41: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST41(void)
{
    // informacje o teście
    test_start(41, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross(NULL, "HGDYOWBA", NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 42: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST42(void)
{
    // informacje o teście
    test_start(42, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross("COURAGE", NULL, NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 43: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
//
void UTEST43(void)
{
    // informacje o teście
    test_start(43, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross(NULL, NULL, NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 44: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 451 bajtów
//
void UTEST44(void)
{
    // informacje o teście
    test_start(44, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 451 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(451);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"ROMANTIC   AFFORD", "E          C", "V          C", "O          O", "L          M", "U          P", "T          L", "I          I", "O          S", "N          H"};
                const char *expected_array_first[] = {"ROMANTIC", "E", "V", "O", "L", "U", "T", "I", "O", "N"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("ROMANTIC", "REVOLUTION", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 45: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 433 bajtów
//
void UTEST45(void)
{
    // informacje o teście
    test_start(45, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 433 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(433);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"AFFORD   ROMANTIC", "C        E", "C        V", "O        O", "M        L", "P        U", "L        T", "I        I", "S        O", "H        N"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"ROMANTIC", "E", "V", "O", "L", "U", "T", "I", "O", "N"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "ROMANTIC", "REVOLUTION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 46: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 525 bajtów
//
void UTEST46(void)
{
    // informacje o teście
    test_start(46, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 525 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(525);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"CGCGPNNAH   AFFORD", "       B    C", "       S    C", "       O    O", "       L    M", "       U    P", "       T    L", "       E    I", "       L    S", "       Y    H"};
                const char *expected_array_first[] = {"CGCGPNNAH", "       B", "       S", "       O", "       L", "       U", "       T", "       E", "       L", "       Y"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("CGCGPNNAH", "ABSOLUTELY", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 47: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 561 bajtów
//
void UTEST47(void)
{
    // informacje o teście
    test_start(47, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 561 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(561);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"AFFORD   CGCGPNNAH", "C               B", "C               S", "O               O", "M               L", "P               U", "L               T", "I               E", "S               L", "H               Y"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"CGCGPNNAH", "       B", "       S", "       O", "       L", "       U", "       T", "       E", "       L", "       Y"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "CGCGPNNAH", "ABSOLUTELY", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 48: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 678 bajtów
//
void UTEST48(void)
{
    // informacje o teście
    test_start(48, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 678 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(678);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"       S", "       P", "       E", "       C", "       I", "       A", "       L", "       I", "       S", "QJXJGURTQ   AFFORD", "            C", "            C", "            O", "            M", "            P", "            L", "            I", "            S", "            H"};
                const char *expected_array_first[] = {"       S", "       P", "       E", "       C", "       I", "       A", "       L", "       I", "       S", "QJXJGURTQ"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("QJXJGURTQ", "SPECIALIST", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 49: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 651 bajtów
//
void UTEST49(void)
{
    // informacje o teście
    test_start(49, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 651 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(651);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                S", "                P", "                E", "                C", "                I", "                A", "                L", "                I", "                S", "AFFORD   QJXJGURTQ", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"       S", "       P", "       E", "       C", "       I", "       A", "       L", "       I", "       S", "QJXJGURTQ"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "QJXJGURTQ", "SPECIALIST", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 50: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 541 bajtów
//
void UTEST50(void)
{
    // informacje o teście
    test_start(50, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 541 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(541);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"P", "R", "O", "F", "E", "S", "S", "I", "O", "NATIONAL   AFFORD", "           C", "           C", "           O", "           M", "           P", "           L", "           I", "           S", "           H"};
                const char *expected_array_first[] = {"P", "R", "O", "F", "E", "S", "S", "I", "O", "NATIONAL"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("NATIONAL", "PROFESSION", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 51: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów
//
void UTEST51(void)
{
    // informacje o teście
    test_start(51, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(523);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"         P", "         R", "         O", "         F", "         E", "         S", "         S", "         I", "         O", "AFFORD   NATIONAL", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"P", "R", "O", "F", "E", "S", "S", "I", "O", "NATIONAL"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "NATIONAL", "PROFESSION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 52: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 616 bajtów
//
void UTEST52(void)
{
    // informacje o teście
    test_start(52, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 616 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(616);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"     A", "     S", "     S", "     E", "     S", "     S", "     M", "     E", "ORIGINAL   AFFORD", "     T     C", "           C", "           O", "           M", "           P", "           L", "           I", "           S", "           H"};
                const char *expected_array_first[] = {"     A", "     S", "     S", "     E", "     S", "     S", "     M", "     E", "ORIGINAL", "     T"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("ORIGINAL", "ASSESSMENT", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 53: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 603 bajtów
//
void UTEST53(void)
{
    // informacje o teście
    test_start(53, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 603 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(603);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"              A", "              S", "              S", "              E", "              S", "              S", "              M", "              E", "AFFORD   ORIGINAL", "C             T", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"     A", "     S", "     S", "     E", "     S", "     S", "     M", "     E", "ORIGINAL", "     T"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "ORIGINAL", "ASSESSMENT", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 54: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 284 bajtów
//
void UTEST54(void)
{
    // informacje o teście
    test_start(54, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 284 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(284);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"N   AFFORD", "    C", "    C", "    O", "    M", "    P", "    L", "    I", "    S", "    H"};
                const char *expected_array_first[] = {"N"};
                const char *expected_array_second[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};

                int err_code = create_double_leading_word_cross("N", "N", "AFFORD", "ACCOMPLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 55: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 248 bajtów
//
void UTEST55(void)
{
    // informacje o teście
    test_start(55, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 248 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(248);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"AFFORD   N", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_first[] = {"AFFORD", "C", "C", "O", "M", "P", "L", "I", "S", "H"};
                const char *expected_array_second[] = {"N"};

                int err_code = create_double_leading_word_cross("AFFORD", "ACCOMPLISH", "N", "N", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 56: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 336 bajtów
//
void UTEST56(void)
{
    // informacje o teście
    test_start(56, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 336 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(336);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"       D", "       I", "       S", "       C", "       I", "       P", "       L", "       I", "I   FRONT", "       E"};
                const char *expected_array_first[] = {"I"};
                const char *expected_array_second[] = {"   D", "   I", "   S", "   C", "   I", "   P", "   L", "   I", "FRONT", "   E"};

                int err_code = create_double_leading_word_cross("I", "I", "FRONT", "DISCIPLINE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 57: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 300 bajtów
//
void UTEST57(void)
{
    // informacje o teście
    test_start(57, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 300 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(300);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"   D", "   I", "   S", "   C", "   I", "   P", "   L", "   I", "FRONT   I", "   E"};
                const char *expected_array_first[] = {"   D", "   I", "   S", "   C", "   I", "   P", "   L", "   I", "FRONT", "   E"};
                const char *expected_array_second[] = {"I"};

                int err_code = create_double_leading_word_cross("FRONT", "DISCIPLINE", "I", "I", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 58: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 735 bajtów
//
void UTEST58(void)
{
    // informacje o teście
    test_start(58, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 735 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(735);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                 D", "                 I", "                 S", "                 C", "       O         I", "       F         P", "       F         L", "       E         I", "TULUHUJRVVR   FRONT", "       P         E", "       M", "       R", "       Q", "       D", "       X", "       G"};
                const char *expected_array_first[] = {"       O", "       F", "       F", "       E", "TULUHUJRVVR", "       P", "       M", "       R", "       Q", "       D", "       X", "       G"};
                const char *expected_array_second[] = {"   D", "   I", "   S", "   C", "   I", "   P", "   L", "   I", "FRONT", "   E"};

                int err_code = create_double_leading_word_cross("TULUHUJRVVR", "OFFERPMRQDXG", "FRONT", "DISCIPLINE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 12; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 12) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 59: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 717 bajtów
//
void UTEST59(void)
{
    // informacje o teście
    test_start(59, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 717 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(717);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"   D", "   I", "   S", "   C", "   I           O", "   P           F", "   L           F", "   I           E", "FRONT   TULUHUJRVVR", "   E           P", "               M", "               R", "               Q", "               D", "               X", "               G"};
                const char *expected_array_first[] = {"   D", "   I", "   S", "   C", "   I", "   P", "   L", "   I", "FRONT", "   E"};
                const char *expected_array_second[] = {"       O", "       F", "       F", "       E", "TULUHUJRVVR", "       P", "       M", "       R", "       Q", "       D", "       X", "       G"};

                int err_code = create_double_leading_word_cross("FRONT", "DISCIPLINE", "TULUHUJRVVR", "OFFERPMRQDXG", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 12; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 12) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 60: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 614 bajtów
//
void UTEST60(void)
{
    // informacje o teście
    test_start(60, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 614 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(614);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                  P", "                  O", "RKGDLDKTQLEGPO   ELEMENTARY", "E                 I", "P                 T", "R                 I", "E                 C", "S                 A", "E                 L", "N", "T", "A", "T", "I", "O", "N"};
                const char *expected_array_first[] = {"RKGDLDKTQLEGPO", "E", "P", "R", "E", "S", "E", "N", "T", "A", "T", "I", "O", "N"};
                const char *expected_array_second[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};

                int err_code = create_double_leading_word_cross("RKGDLDKTQLEGPO", "REPRESENTATION", "ELEMENTARY", "POLITICAL", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 61: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 641 bajtów
//
void UTEST61(void)
{
    // informacje o teście
    test_start(61, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 641 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(641);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {" P", " O", "ELEMENTARY   RKGDLDKTQLEGPO", " I           E", " T           P", " I           R", " C           E", " A           S", " L           E", "             N", "             T", "             A", "             T", "             I", "             O", "             N"};
                const char *expected_array_first[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};
                const char *expected_array_second[] = {"RKGDLDKTQLEGPO", "E", "P", "R", "E", "S", "E", "N", "T", "A", "T", "I", "O", "N"};

                int err_code = create_double_leading_word_cross("ELEMENTARY", "POLITICAL", "RKGDLDKTQLEGPO", "REPRESENTATION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 62: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 702 bajtów
//
void UTEST62(void)
{
    // informacje o teście
    test_start(62, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 702 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(702);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"      R", "      E", "      P", "      R", "      E", "      S           P", "      E           O", "CCZZZLNTQDOPRF   ELEMENTARY", "      T           I", "      A           T", "      T           I", "      I           C", "      O           A", "      N           L"};
                const char *expected_array_first[] = {"      R", "      E", "      P", "      R", "      E", "      S", "      E", "CCZZZLNTQDOPRF", "      T", "      A", "      T", "      I", "      O", "      N"};
                const char *expected_array_second[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};

                int err_code = create_double_leading_word_cross("CCZZZLNTQDOPRF", "REPRESENTATION", "ELEMENTARY", "POLITICAL", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!14)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 14; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 63: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów
//
void UTEST63(void)
{
    // informacje o teście
    test_start(63, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(775);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                   R", "                   E", "                   P", "                   R", "                   E", " P                 S", " O                 E", "ELEMENTARY   CCZZZLNTQDOPRF", " I                 T", " T                 A", " I                 T", " C                 I", " A                 O", " L                 N"};
                const char *expected_array_first[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};
                const char *expected_array_second[] = {"      R", "      E", "      P", "      R", "      E", "      S", "      E", "CCZZZLNTQDOPRF", "      T", "      A", "      T", "      I", "      O", "      N"};

                int err_code = create_double_leading_word_cross("ELEMENTARY", "POLITICAL", "CCZZZLNTQDOPRF", "REPRESENTATION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!14)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 14; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 64: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów
//
void UTEST64(void)
{
    // informacje o teście
    test_start(64, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(775);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"         T", "         R", "         A", "         N", "         S", "         F", "         O        P", "         R        O", "KHVUWWEQDMPMPP   ELEMENTARY", "         A        I", "         T        T", "         I        I", "         O        C", "         N        A", "                  L"};
                const char *expected_array_first[] = {"         T", "         R", "         A", "         N", "         S", "         F", "         O", "         R", "KHVUWWEQDMPMPP", "         A", "         T", "         I", "         O", "         N"};
                const char *expected_array_second[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};

                int err_code = create_double_leading_word_cross("KHVUWWEQDMPMPP", "TRANSFORMATION", "ELEMENTARY", "POLITICAL", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!15)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 15; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 15) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 65: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 864 bajtów
//
void UTEST65(void)
{
    // informacje o teście
    test_start(65, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 864 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(864);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                      T", "                      R", "                      A", "                      N", "                      S", "                      F", " P                    O", " O                    R", "ELEMENTARY   KHVUWWEQDMPMPP", " I                    A", " T                    T", " I                    I", " C                    O", " A                    N", " L"};
                const char *expected_array_first[] = {" P", " O", "ELEMENTARY", " I", " T", " I", " C", " A", " L"};
                const char *expected_array_second[] = {"         T", "         R", "         A", "         N", "         S", "         F", "         O", "         R", "KHVUWWEQDMPMPP", "         A", "         T", "         I", "         O", "         N"};

                int err_code = create_double_leading_word_cross("ELEMENTARY", "POLITICAL", "KHVUWWEQDMPMPP", "TRANSFORMATION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!15)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 15; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 15) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 14; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 66: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 806 bajtów
//
void UTEST66(void)
{
    // informacje o teście
    test_start(66, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 806 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(806);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"VMZIILLKKXYWAVEDANC   GPRVCFEYTYJ", "L                           S", "G                           T", "W                           A", "I                           B", "M                           L", "I                           I", "J                           S", "S                           H", "P", "U", "A", "T", "M", "Z", "F", "H", "I"};
                const char *expected_array_first[] = {"VMZIILLKKXYWAVEDANC", "L", "G", "W", "I", "M", "I", "J", "S", "P", "U", "A", "T", "M", "Z", "F", "H", "I"};
                const char *expected_array_second[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};

                int err_code = create_double_leading_word_cross("VMZIILLKKXYWAVEDANC", "VLGWIMIJSPUATMZFHI", "GPRVCFEYTYJ", "ESTABLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 67: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 820 bajtów
//
void UTEST67(void)
{
    // informacje o teście
    test_start(67, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 820 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(820);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"GPRVCFEYTYJ   VMZIILLKKXYWAVEDANC", "      S       L", "      T       G", "      A       W", "      B       I", "      L       M", "      I       I", "      S       J", "      H       S", "              P", "              U", "              A", "              T", "              M", "              Z", "              F", "              H", "              I"};
                const char *expected_array_first[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};
                const char *expected_array_second[] = {"VMZIILLKKXYWAVEDANC", "L", "G", "W", "I", "M", "I", "J", "S", "P", "U", "A", "T", "M", "Z", "F", "H", "I"};

                int err_code = create_double_leading_word_cross("GPRVCFEYTYJ", "ESTABLISH", "VMZIILLKKXYWAVEDANC", "VLGWIMIJSPUATMZFHI", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 68: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1014 bajtów
//
void UTEST68(void)
{
    // informacje o teście
    test_start(68, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1014 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(1014);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"UGULLKMKNIZTRHHEWRC   GPRVCFEYTYJ", "        Y                   S", "        H                   T", "        I                   A", "        B                   B", "        P                   L", "        Q                   I", "        Z                   S", "        E                   H", "        V", "        P", "        J", "        Q", "        C", "        S", "        I", "        C", "        D"};
                const char *expected_array_first[] = {"UGULLKMKNIZTRHHEWRC", "        Y", "        H", "        I", "        B", "        P", "        Q", "        Z", "        E", "        V", "        P", "        J", "        Q", "        C", "        S", "        I", "        C", "        D"};
                const char *expected_array_second[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};

                int err_code = create_double_leading_word_cross("UGULLKMKNIZTRHHEWRC", "NYHIBPQZEVPJQCSICD", "GPRVCFEYTYJ", "ESTABLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 69: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1092 bajtów
//
void UTEST69(void)
{
    // informacje o teście
    test_start(69, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1092 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(1092);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"GPRVCFEYTYJ   UGULLKMKNIZTRHHEWRC", "      S               Y", "      T               H", "      A               I", "      B               B", "      L               P", "      I               Q", "      S               Z", "      H               E", "                      V", "                      P", "                      J", "                      Q", "                      C", "                      S", "                      I", "                      C", "                      D"};
                const char *expected_array_first[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};
                const char *expected_array_second[] = {"UGULLKMKNIZTRHHEWRC", "        Y", "        H", "        I", "        B", "        P", "        Q", "        Z", "        E", "        V", "        P", "        J", "        Q", "        C", "        S", "        I", "        C", "        D"};

                int err_code = create_double_leading_word_cross("GPRVCFEYTYJ", "ESTABLISH", "UGULLKMKNIZTRHHEWRC", "NYHIBPQZEVPJQCSICD", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 70: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 884 bajtów
//
void UTEST70(void)
{
    // informacje o teście
    test_start(70, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 884 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(884);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"   Y", "   Z", "   I", "   O", "   F", "   H", "   R", "   V", "GDCNPYXLITMLWTXMCAB   GPRVCFEYTYJ", "   A                        S", "   M                        T", "   Z                        A", "   H                        B", "   J                        L", "   Z                        I", "   Q                        S", "   I                        H", "   H"};
                const char *expected_array_first[] = {"   Y", "   Z", "   I", "   O", "   F", "   H", "   R", "   V", "GDCNPYXLITMLWTXMCAB", "   A", "   M", "   Z", "   H", "   J", "   Z", "   Q", "   I", "   H"};
                const char *expected_array_second[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};

                int err_code = create_double_leading_word_cross("GDCNPYXLITMLWTXMCAB", "YZIOFHRVNAMZHJZQIH", "GPRVCFEYTYJ", "ESTABLISH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 71: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 922 bajtów
//
void UTEST71(void)
{
    // informacje o teście
    test_start(71, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 922 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(922);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                 Y", "                 Z", "                 I", "                 O", "                 F", "                 H", "                 R", "                 V", "GPRVCFEYTYJ   GDCNPYXLITMLWTXMCAB", "      S          A", "      T          M", "      A          Z", "      B          H", "      L          J", "      I          Z", "      S          Q", "      H          I", "                 H"};
                const char *expected_array_first[] = {"GPRVCFEYTYJ", "      S", "      T", "      A", "      B", "      L", "      I", "      S", "      H"};
                const char *expected_array_second[] = {"   Y", "   Z", "   I", "   O", "   F", "   H", "   R", "   V", "GDCNPYXLITMLWTXMCAB", "   A", "   M", "   Z", "   H", "   J", "   Z", "   Q", "   I", "   H"};

                int err_code = create_double_leading_word_cross("GPRVCFEYTYJ", "ESTABLISH", "GDCNPYXLITMLWTXMCAB", "YZIOFHRVNAMZHJZQIH", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!18)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 18; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 18; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 18) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 72: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 537 bajtów
//
void UTEST72(void)
{
    // informacje o teście
    test_start(72, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 537 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(537);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"               V", "PURCHASE   DBDWAY", "   O           R", "   N           I", "   V           A", "   I           T", "   C           I", "   T           O", "   I           N", "   O", "   N"};
                const char *expected_array_first[] = {"PURCHASE", "   O", "   N", "   V", "   I", "   C", "   T", "   I", "   O", "   N"};
                const char *expected_array_second[] = {"    V", "DBDWAY", "    R", "    I", "    A", "    T", "    I", "    O", "    N"};

                int err_code = create_double_leading_word_cross("PURCHASE", "CONVICTION", "DBDWAY", "VARIATION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!11)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 11; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 11) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 73: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów
//
void UTEST73(void)
{
    // informacje o teście
    test_start(73, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(523);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"    V", "DBDWAY   PURCHASE", "    R       O", "    I       N", "    A       V", "    T       I", "    I       C", "    O       T", "    N       I", "            O", "            N"};
                const char *expected_array_first[] = {"    V", "DBDWAY", "    R", "    I", "    A", "    T", "    I", "    O", "    N"};
                const char *expected_array_second[] = {"PURCHASE", "   O", "   N", "   V", "   I", "   C", "   T", "   I", "   O", "   N"};

                int err_code = create_double_leading_word_cross("DBDWAY", "VARIATION", "PURCHASE", "CONVICTION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!11)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 11; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 11) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 74: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
//
void UTEST74(void)
{
    // informacje o teście
    test_start(74, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(104);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("AGGRESSIVE", "JUDGMENT", "LIMIT", "APPEARANCE", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 75: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST75(void)
{
    // informacje o teście
    test_start(75, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};

                int err_code = create_double_leading_word_cross("LIMIT", "APPEARANCE", "AGGRESSIVE", "JUDGMENT", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 76: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
//
void UTEST76(void)
{
    // informacje o teście
    test_start(76, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(104);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("AGGRESSIVE", "JUDGMENT", "A", "FUNCTION", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 77: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST77(void)
{
    // informacje o teście
    test_start(77, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};

                int err_code = create_double_leading_word_cross("A", "FUNCTION", "AGGRESSIVE", "JUDGMENT", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 78: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
//
void UTEST78(void)
{
    // informacje o teście
    test_start(78, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(104);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("AGGRESSIVE", "JUDGMENT", "LIKELY", "N", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 79: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST79(void)
{
    // informacje o teście
    test_start(79, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};

                int err_code = create_double_leading_word_cross("LIKELY", "N", "AGGRESSIVE", "JUDGMENT", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 80: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
//
void UTEST80(void)
{
    // informacje o teście
    test_start(80, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(104);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("AGGRESSIVE", "JUDGMENT", "KBBDUGBGSWBYVOB", "AFRICANAMERICAN", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 81: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST81(void)
{
    // informacje o teście
    test_start(81, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {" J", " U", " D", "AGGRESSIVE", " M", " E", " N", " T"};

                int err_code = create_double_leading_word_cross("KBBDUGBGSWBYVOB", "AFRICANAMERICAN", "AGGRESSIVE", "JUDGMENT", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 82: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST82(void)
{
    // informacje o teście
    test_start(82, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("KQYXJZZLKXDJWSJPH", "AFRICANAMERICAN", "GKYUBWHDPPUGPLX", "AFRICANAMERICAN", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 83: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST83(void)
{
    // informacje o teście
    test_start(83, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(208);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("GKYUBWHDPPUGPLX", "AFRICANAMERICAN", "KQYXJZZLKXDJWSJPH", "AFRICANAMERICAN", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 84: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST84(void)
{
    // informacje o teście
    test_start(84, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("VOLUME", "where", "INDIAN", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 85: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST85(void)
{
    // informacje o teście
    test_start(85, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("indian", "BLOOD", "VOLUME", "WHERE", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 86: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST86(void)
{
    // informacje o teście
    test_start(86, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("VOLUME", "WHERE", "indian", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 87: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST87(void)
{
    // informacje o teście
    test_start(87, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("INDIAN", "BLOOD", "VOLUME", "where", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 88: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST88(void)
{
    // informacje o teście
    test_start(88, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("WHERE", "VOLUME\n", "INDIAN", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 89: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST89(void)
{
    // informacje o teście
    test_start(89, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("WHERE\n", "VOLUME", "INDIAN", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 90: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST90(void)
{
    // informacje o teście
    test_start(90, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("INDIAN", "BLOOD", "WHERE", "VOLUME\n", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 91: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST91(void)
{
    // informacje o teście
    test_start(91, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("INDIAN", "BLOOD", "WHERE\n", "VOLUME", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 92: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST92(void)
{
    // informacje o teście
    test_start(92, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("fWHERE", "VOLUME", "INDIAN", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 93: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST93(void)
{
    // informacje o teście
    test_start(93, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("INDIAN", "BLOOD", "fWHERE", "VOLUME", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 94: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST94(void)
{
    // informacje o teście
    test_start(94, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("WHERE", "VOLqUME", "INDIAN", "BLOOD", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 95: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
//
void UTEST95(void)
{
    // informacje o teście
    test_start(95, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("INDIAN", "BLOOD", "WHERE", "VOLqUME", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 96: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
//
void UTEST96(void)
{
    // informacje o teście
    test_start(96, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 97: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów
//
void UTEST97(void)
{
    // informacje o teście
    test_start(97, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(56);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 98: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 63 bajtów
//
void UTEST98(void)
{
    // informacje o teście
    test_start(98, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 63 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(63);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 99: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 75 bajtów
//
void UTEST99(void)
{
    // informacje o teście
    test_start(99, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 75 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(75);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 100: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 87 bajtów
//
void UTEST100(void)
{
    // informacje o teście
    test_start(100, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 87 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(87);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 101: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 99 bajtów
//
void UTEST101(void)
{
    // informacje o teście
    test_start(101, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 99 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(99);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 102: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 111 bajtów
//
void UTEST102(void)
{
    // informacje o teście
    test_start(102, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 111 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(111);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 103: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 167 bajtów
//
void UTEST103(void)
{
    // informacje o teście
    test_start(103, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 167 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(167);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 104: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 174 bajtów
//
void UTEST104(void)
{
    // informacje o teście
    test_start(104, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 174 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(174);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 105: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów
//
void UTEST105(void)
{
    // informacje o teście
    test_start(105, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(181);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 106: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 188 bajtów
//
void UTEST106(void)
{
    // informacje o teście
    test_start(106, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 188 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(188);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 107: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 195 bajtów
//
void UTEST107(void)
{
    // informacje o teście
    test_start(107, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 195 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(195);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 108: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 202 bajtów
//
void UTEST108(void)
{
    // informacje o teście
    test_start(108, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 202 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(202);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 109: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów
//
void UTEST109(void)
{
    // informacje o teście
    test_start(109, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(250);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 110: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 252 bajtów
//
void UTEST110(void)
{
    // informacje o teście
    test_start(110, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 252 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(252);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 111: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 254 bajtów
//
void UTEST111(void)
{
    // informacje o teście
    test_start(111, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 254 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(254);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 112: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 256 bajtów
//
void UTEST112(void)
{
    // informacje o teście
    test_start(112, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 256 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(256);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 113: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST113(void)
{
    // informacje o teście
    test_start(113, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(258);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "EVALUATION", "SHORE", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 114: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST114(void)
{
    // informacje o teście
    test_start(114, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "MIXTURE", "WONDER", NULL, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 115: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST115(void)
{
    // informacje o teście
    test_start(115, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, "MIXTURE", "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 116: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST116(void)
{
    // informacje o teście
    test_start(116, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", "MIXTURE", "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 117: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST117(void)
{
    // informacje o teście
    test_start(117, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, "MIXTURE", "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 118: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST118(void)
{
    // informacje o teście
    test_start(118, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", "MIXTURE", "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 119: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST119(void)
{
    // informacje o teście
    test_start(119, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, "MIXTURE", "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 120: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST120(void)
{
    // informacje o teście
    test_start(120, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, "MIXTURE", "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 121: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST121(void)
{
    // informacje o teście
    test_start(121, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", "MIXTURE", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 122: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST122(void)
{
    // informacje o teście
    test_start(122, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, "MIXTURE", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 123: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST123(void)
{
    // informacje o teście
    test_start(123, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", "MIXTURE", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 124: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST124(void)
{
    // informacje o teście
    test_start(124, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, "MIXTURE", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 125: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST125(void)
{
    // informacje o teście
    test_start(125, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", "MIXTURE", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 126: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST126(void)
{
    // informacje o teście
    test_start(126, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, "MIXTURE", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 127: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST127(void)
{
    // informacje o teście
    test_start(127, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, "MIXTURE", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 128: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST128(void)
{
    // informacje o teście
    test_start(128, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", NULL, "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 129: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST129(void)
{
    // informacje o teście
    test_start(129, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, NULL, "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 130: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST130(void)
{
    // informacje o teście
    test_start(130, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", NULL, "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 131: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST131(void)
{
    // informacje o teście
    test_start(131, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, "WONDER", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 132: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST132(void)
{
    // informacje o teście
    test_start(132, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", NULL, "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 133: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST133(void)
{
    // informacje o teście
    test_start(133, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, NULL, "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 134: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST134(void)
{
    // informacje o teście
    test_start(134, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, "WONDER", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 135: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST135(void)
{
    // informacje o teście
    test_start(135, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", "WONDER", NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 136: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST136(void)
{
    // informacje o teście
    test_start(136, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 137: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST137(void)
{
    // informacje o teście
    test_start(137, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 138: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST138(void)
{
    // informacje o teście
    test_start(138, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 139: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST139(void)
{
    // informacje o teście
    test_start(139, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "WONDER", NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 140: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST140(void)
{
    // informacje o teście
    test_start(140, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("MIXTURE", NULL, NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 141: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST141(void)
{
    // informacje o teście
    test_start(141, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 142: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
//
void UTEST142(void)
{
    // informacje o teście
    test_start(142, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, NULL, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}



//
//  Test 1: Reakcja na brak pamięci; limit ustawiono na 0 bajtów
//
void MTEST1(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(1, "Reakcja na brak pamięci; limit ustawiono na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 2: Reakcja na brak pamięci; limit ustawiono na 11 bajtów
//
void MTEST2(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(2, "Reakcja na brak pamięci; limit ustawiono na 11 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(11);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 3: Reakcja na brak pamięci; limit ustawiono na 22 bajtów
//
void MTEST3(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(3, "Reakcja na brak pamięci; limit ustawiono na 22 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(22);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 4: Reakcja na brak pamięci; limit ustawiono na 33 bajtów
//
void MTEST4(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(4, "Reakcja na brak pamięci; limit ustawiono na 33 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(33);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 5: Reakcja na brak pamięci; limit ustawiono na 44 bajtów
//
void MTEST5(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(5, "Reakcja na brak pamięci; limit ustawiono na 44 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(44);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 6: Reakcja na brak pamięci; limit ustawiono na 155 bajtów
//
void MTEST6(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(6, "Reakcja na brak pamięci; limit ustawiono na 155 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(155);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 7: Reakcja na brak pamięci; limit ustawiono na 231 bajtów
//
void MTEST7(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(7, "Reakcja na brak pamięci; limit ustawiono na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 8: Reakcja na brak pamięci; limit ustawiono na 382 bajtów
//
void MTEST8(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(8, "Reakcja na brak pamięci; limit ustawiono na 382 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(382);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 9: Reakcja na brak pamięci; limit ustawiono na 396 bajtów
//
void MTEST9(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(9, "Reakcja na brak pamięci; limit ustawiono na 396 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(396);
    
    //
    // -----------
    //
    
            printf("***START***\n");
            int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
            printf("\n***END***\n");
            test_error(ret_code == 0, "Funkcja main zakończyła się kodem %d a powinna 0", ret_code);
            test_no_heap_leakage();
        
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}


enum run_mode_t { rm_normal_with_rld = 0, rm_unit_test = 1, rm_main_test = 2 };

int __wrap_main(volatile int _argc, char** _argv, char** _envp)
{
    int volatile vargc = _argc;
    char ** volatile vargv = _argv, ** volatile venvp = _envp;
    volatile enum run_mode_t run_mode = rm_unit_test; // -1
    volatile int selected_test = -1;

    if (vargc > 1)
    {
        char* smode = strtok(vargv[1], ",");
        char* stest = strtok(NULL, "");
        char *errptr = NULL;
        run_mode = (enum run_mode_t)strtol(smode, &errptr, 10);
        if (*errptr == '\x0')
        {
            memmove(vargv + 1, vargv + 2, sizeof(char*) * (vargc - 1));
            vargc--;

            if (stest != NULL)
            {
                int val = (int)strtol(stest, &errptr, 10);
                if (*errptr == '\x0')
                    selected_test = val;
            }
        }
    }

    // printf("runmode=%d; selected_test=%d\n", run_mode, selected_test);

    // inicjuj testy jednostkowe
    unit_test_init(run_mode, "unit_test_v2.c");
    test_limit_init();
    rldebug_set_reported_severity_level(MSL_FAILURE);

    if (run_mode == rm_normal_with_rld)
    {
        // konfiguracja ograniczników
        rldebug_reset_limits();
        

        // uruchom funkcję main Studenta a potem wyświetl podsumowanie sterty i zasobów
        volatile int ret_code = rdebug_call_main(tested_main, vargc, vargv, venvp);

        rldebug_reset_limits();
        

        int leaks_detected = rldebug_show_leaked_resources(0);
        if (leaks_detected)
            raise(SIGHEAP);

        return ret_code;
    }

    
    if (run_mode == rm_unit_test)
    {
        test_title("Testy jednostkowe");

        void (*pfcn[])(void) =
        { 
            UTEST1, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
            UTEST2, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 104 bajtów
            UTEST3, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 103 bajtów
            UTEST4, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
            UTEST5, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 71 bajtów
            UTEST6, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów
            UTEST7, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
            UTEST8, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
            UTEST9, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 25 bajtów
            UTEST10, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
            UTEST11, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
            UTEST12, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 179 bajtów
            UTEST13, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 84 bajtów
            UTEST14, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 109 bajtów
            UTEST15, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 46 bajtów
            UTEST16, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 49 bajtów
            UTEST17, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów
            UTEST18, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST19, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST20, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST21, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST22, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST23, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST24, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST25, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST26, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST27, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST28, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 131 bajtów
            UTEST29, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
            UTEST30, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów
            UTEST31, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 67 bajtów
            UTEST32, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 70 bajtów
            UTEST33, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 73 bajtów
            UTEST34, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 76 bajtów
            UTEST35, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów
            UTEST36, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST37, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST38, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST39, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST40, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST41, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST42, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST43, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 88 bajtów
            UTEST44, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 451 bajtów
            UTEST45, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 433 bajtów
            UTEST46, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 525 bajtów
            UTEST47, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 561 bajtów
            UTEST48, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 678 bajtów
            UTEST49, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 651 bajtów
            UTEST50, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 541 bajtów
            UTEST51, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów
            UTEST52, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 616 bajtów
            UTEST53, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 603 bajtów
            UTEST54, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 284 bajtów
            UTEST55, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 248 bajtów
            UTEST56, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 336 bajtów
            UTEST57, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 300 bajtów
            UTEST58, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 735 bajtów
            UTEST59, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 717 bajtów
            UTEST60, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 614 bajtów
            UTEST61, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 641 bajtów
            UTEST62, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 702 bajtów
            UTEST63, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów
            UTEST64, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 775 bajtów
            UTEST65, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 864 bajtów
            UTEST66, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 806 bajtów
            UTEST67, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 820 bajtów
            UTEST68, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1014 bajtów
            UTEST69, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1092 bajtów
            UTEST70, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 884 bajtów
            UTEST71, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 922 bajtów
            UTEST72, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 537 bajtów
            UTEST73, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 523 bajtów
            UTEST74, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
            UTEST75, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST76, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
            UTEST77, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST78, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
            UTEST79, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST80, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 104 bajtów
            UTEST81, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST82, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST83, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST84, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST85, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST86, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST87, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST88, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST89, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST90, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST91, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST92, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST93, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST94, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST95, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 208 bajtów
            UTEST96, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
            UTEST97, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów
            UTEST98, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 63 bajtów
            UTEST99, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 75 bajtów
            UTEST100, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 87 bajtów
            UTEST101, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 99 bajtów
            UTEST102, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 111 bajtów
            UTEST103, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 167 bajtów
            UTEST104, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 174 bajtów
            UTEST105, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów
            UTEST106, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 188 bajtów
            UTEST107, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 195 bajtów
            UTEST108, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 202 bajtów
            UTEST109, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów
            UTEST110, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 252 bajtów
            UTEST111, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 254 bajtów
            UTEST112, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 256 bajtów
            UTEST113, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST114, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST115, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST116, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST117, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST118, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST119, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST120, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST121, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST122, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST123, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST124, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST125, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST126, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST127, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST128, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST129, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST130, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST131, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST132, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST133, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST134, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST135, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST136, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST137, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST138, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST139, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST140, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST141, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            UTEST142, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 258 bajtów
            NULL
        };

        for (int idx = 0; pfcn[idx] != NULL && !test_get_session_termination_flag(); idx++)
        {
            if (selected_test == -1 || selected_test == idx + 1)
                pfcn[idx]();

            // limit niezaliczonych testów, po jakim testy jednostkowe zostaną przerwane
            if (test_session_get_fail_count() >= 1000)
                test_terminate_session();
        }


        test_title("RLDebug :: Analiza wycieku zasobów");
        // sprawdź wycieki pamięci
        int leaks_detected = rldebug_show_leaked_resources(1);
        test_set_session_leaks(leaks_detected);

        // poinformuj serwer Mrówka o wyniku testu - podsumowanie
        test_title("Podsumowanie");
        if (selected_test == -1)
            test_summary(142); // wszystkie testy muszą zakończyć się sukcesem
        else
            test_summary(1); // tylko jeden (selected_test) test musi zakończyć się  sukcesem
        return EXIT_SUCCESS;
    }
    

    if (run_mode == rm_main_test)
    {
        test_title("Testy funkcji main()");

        void (*pfcn[])(int, char**, char**) =
        { 
            MTEST1, // Reakcja na brak pamięci; limit ustawiono na 0 bajtów
            MTEST2, // Reakcja na brak pamięci; limit ustawiono na 11 bajtów
            MTEST3, // Reakcja na brak pamięci; limit ustawiono na 22 bajtów
            MTEST4, // Reakcja na brak pamięci; limit ustawiono na 33 bajtów
            MTEST5, // Reakcja na brak pamięci; limit ustawiono na 44 bajtów
            MTEST6, // Reakcja na brak pamięci; limit ustawiono na 155 bajtów
            MTEST7, // Reakcja na brak pamięci; limit ustawiono na 231 bajtów
            MTEST8, // Reakcja na brak pamięci; limit ustawiono na 382 bajtów
            MTEST9, // Reakcja na brak pamięci; limit ustawiono na 396 bajtów
            NULL
        };

        for (volatile int idx = 0; pfcn[idx] != NULL && !test_get_session_termination_flag(); idx++)
        {
            if (selected_test == -1 || selected_test == idx + 1)
                pfcn[idx](vargc, vargv, venvp);

            // limit niezaliczonych testów, po jakim testy jednostkowe zostaną przerwane
            if (test_session_get_fail_count() >= 1000)
                test_terminate_session();
        }


        test_title("RLDebug :: Analiza wycieku zasobów");
        // sprawdź wycieki pamięci
        int leaks_detected = rldebug_show_leaked_resources(1);
        test_set_session_leaks(leaks_detected);

        // poinformuj serwer Mrówka o wyniku testu - podsumowanie
        test_title("Podsumowanie");
        if (selected_test == -1)
            test_summary(9); // wszystkie testy muszą zakończyć się sukcesem
        else
            test_summary(1); // tylko jeden (selected_test) test musi zakończyć się  sukcesem

        return EXIT_SUCCESS;
    }

    printf("*** Nieznana wartość RunMode: %d", (int)run_mode);
    abort();
}
