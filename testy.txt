#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>
#include <setjmp.h>
#include <assert.h>

#if !defined(__clang__) && !defined(__GNUC__)
// Zakomentuj poniższy błąd, jeżeli chcesz przetestować testy na swoim kompilatorze C.
#error System testow jednostkowych jest przeznaczony dla kompilatorów GCC/Clang.
#endif

#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__)
// Zakomentuj poniższy błąd, jeżeli chcesz przetestować testy na platformie Windows.
#error System testow jednostkowych NIE jest przeznaczony dla testów uruchamianych na platformach Windows.
#endif

#define _RLDEBUG_API_
#include "unit_helper_v2.h"
#include "rdebug.h"

#include "tested_declarations.h"
#include "rdebug.h"

//
// Elementy globalne dla całego testu
//




//
//  Test 1: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 114 bajtów
//
void UTEST1(void)
{
    // informacje o teście
    test_start(1, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 114 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(114);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"DRAWING", "I", "S", "C", "I", "P", "L", "I", "N", "E"};

                int err_code = create_leading_word_cross("DISCIPLINE", "DRAWING", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 10) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 2: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 169 bajtów
//
void UTEST2(void)
{
    // informacje o teście
    test_start(2, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 169 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(169);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"MTJCTGVM", "      U", "      L", "      N", "      E", "      R", "      A", "      B", "      L", "      E"};

                int err_code = create_leading_word_cross("VULNERABLE", "MTJCTGVM", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 10) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 3: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 168 bajtów
//
void UTEST3(void)
{
    // informacje o teście
    test_start(3, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 168 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(168);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"      A", "      S", "      S", "      E", "      S", "      S", "      M", "      E", "      N", "PRODUCT"};

                int err_code = create_leading_word_cross("ASSESSMENT", "PRODUCT", &output);
                test_error(err_code == 9, "Funkcja create_leading_word_cross() powinna zwrócić 9, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 10) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 4: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 115 bajtów
//
void UTEST4(void)
{
    // informacje o teście
    test_start(4, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 115 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(115);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"E", "F", "F", "I", "C", "I", "E", "N", "C", "YERVWGLW"};

                int err_code = create_leading_word_cross("EFFICIENCY", "YERVWGLW", &output);
                test_error(err_code == 9, "Funkcja create_leading_word_cross() powinna zwrócić 9, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 10) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 5: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 132 bajtów
//
void UTEST5(void)
{
    // informacje o teście
    test_start(5, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 132 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(132);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"  T", "  R", "  E", "  M", "  E", "  N", "  D", "  O", "CLUSTER", "  S"};

                int err_code = create_leading_word_cross("TREMENDOUS", "CLUSTER", &output);
                test_error(err_code == 8, "Funkcja create_leading_word_cross() powinna zwrócić 8, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 10) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 6: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów
//
void UTEST6(void)
{
    // informacje o teście
    test_start(6, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(18);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"T"};

                int err_code = create_leading_word_cross("T", "T", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 7: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów
//
void UTEST7(void)
{
    // informacje o teście
    test_start(7, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(26);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"NARRATIVE"};

                int err_code = create_leading_word_cross("N", "NARRATIVE", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 8: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 27 bajtów
//
void UTEST8(void)
{
    // informacje o teście
    test_start(8, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 27 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(27);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"BPYCXCNZII"};

                int err_code = create_leading_word_cross("I", "BPYCXCNZII", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 9: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów
//
void UTEST9(void)
{
    // informacje o teście
    test_start(9, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(26);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"REINFORCE"};

                int err_code = create_leading_word_cross("N", "REINFORCE", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!1)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 1; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 1) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 10: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 118 bajtów
//
void UTEST10(void)
{
    // informacje o teście
    test_start(10, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 118 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(118);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"N", "E", "G", "O", "T", "I", "A", "T", "I", "O", "N"};

                int err_code = create_leading_word_cross("NEGOTIATION", "N", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!11)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 11; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 11) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 11: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów
//
void UTEST11(void)
{
    // informacje o teście
    test_start(11, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(119);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"A", "N", "N", "I", "V", "E", "R", "S", "A", "R", "YG"};

                int err_code = create_leading_word_cross("ANNIVERSARY", "YG", &output);
                test_error(err_code == 10, "Funkcja create_leading_word_cross() powinna zwrócić 10, a zwróciła %d", err_code);        

                if (!11)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 11; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 11) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 12: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów
//
void UTEST12(void)
{
    // informacje o teście
    test_start(12, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(119);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"A", "D", "V", "E", "R", "T", "I", "SY", "I", "N", "G"};

                int err_code = create_leading_word_cross("ADVERTISING", "SY", &output);
                test_error(err_code == 7, "Funkcja create_leading_word_cross() powinna zwrócić 7, a zwróciła %d", err_code);        

                if (!11)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 11; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 11) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 13: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 86 bajtów
//
void UTEST13(void)
{
    // informacje o teście
    test_start(13, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 86 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(86);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"TTZSQYZFG", "T", "I", "H", "R", "V", "A"};

                int err_code = create_leading_word_cross("TTIHRVA", "TTZSQYZFG", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!7)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 7; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 7) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 14: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 110 bajtów
//
void UTEST14(void)
{
    // informacje o teście
    test_start(14, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 110 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(110);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"    B", "HONEYYZWS", "    D", "    Y", "    L", "    C", "    F"};

                int err_code = create_leading_word_cross("BYDYLCF", "HONEYYZWS", &output);
                test_error(err_code == 1, "Funkcja create_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!7)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 7; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 7) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 15: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 44 bajtów
//
void UTEST15(void)
{
    // informacje o teście
    test_start(15, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 44 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(44);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"TJKTGYE", "V", "T"};

                int err_code = create_leading_word_cross("TVT", "TJKTGYE", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!3)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 3; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 3) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 16: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 52 bajtów
//
void UTEST16(void)
{
    // informacje o teście
    test_start(16, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 52 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(52);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"AGAINNF", "    N", "    M"};

                int err_code = create_leading_word_cross("NNM", "AGAINNF", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!3)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 3; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 3) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 17: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 230 bajtów
//
void UTEST17(void)
{
    // informacje o teście
    test_start(17, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 230 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(230);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"ATA", "N", "E", "J", "C", "M", "Z", "S", "E", "O", "Y", "W", "I", "N", "A", "D", "X", "G", "Z", "W", "R", "I"};

                int err_code = create_leading_word_cross("ANEJCMZSEOYWINADXGZWRI", "ATA", &output);
                test_error(err_code == 0, "Funkcja create_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!22)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 22; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 22) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 18: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST18(void)
{
    // informacje o teście
    test_start(18, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {"R", "E", "V", "I", "E", "WCWP", "X", "A", "R", "U", "F", "G", "W", "P", "I", "D", "H", "N", "O", "I", "P", "A"};

                int err_code = create_leading_word_cross("REVIEWXARUFGWPIDHNOIPA", "WCWP", &output);
                test_error(err_code == 5, "Funkcja create_leading_word_cross() powinna zwrócić 5, a zwróciła %d", err_code);        

                if (!22)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 22; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 22) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 19: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST19(void)
{
    // informacje o teście
    test_start(19, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("SUCCESSFUL", "ABORTION", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 20: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST20(void)
{
    // informacje o teście
    test_start(20, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("STANDARD", "I", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 21: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST21(void)
{
    // informacje o teście
    test_start(21, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("I", "UNDERSTAND", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 22: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST22(void)
{
    // informacje o teście
    test_start(22, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(231);
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("KLNUWAFVRWUJNXQYD", "IEEMTCSIHZSMTHB", &output);
                test_error(err_code == -2, "Funkcja create_leading_word_cross() powinna zwrócić -2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 23: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST23(void)
{
    // informacje o teście
    test_start(23, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("UOLRMWZDCDZNQCVTDS", "aiaykqyulwraemvu", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 24: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST24(void)
{
    // informacje o teście
    test_start(24, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("uolrmwzdcdznqcvtds", "AIAYKQYULWRAEMVU", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 25: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST25(void)
{
    // informacje o teście
    test_start(25, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("UOLRMWZDCDZNQCVTDS", "AIAYKQYULWRAEMVU\n", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 26: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST26(void)
{
    // informacje o teście
    test_start(26, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("UOLRMWZDCDZNQCVTDS\n", "AIAYKQYULWRAEMVU", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 27: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST27(void)
{
    // informacje o teście
    test_start(27, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("UOLRMWZkDCDZNQCVTDS", "AIAYKQYULWRAEMVU", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 28: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
//
void UTEST28(void)
{
    // informacje o teście
    test_start(28, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output;
            
                const char *expected_array[] = {""};

                int err_code = create_leading_word_cross("UOLRMWZDCDZNQCVTDS", "AIAYKQzYULWRAEMVU", &output);
                test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
        
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
        
                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        
        
                    test_error(*(output + 0) == NULL, "Funkcja create_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
        
                    destroy(output);
                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 29: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
//
void UTEST29(void)
{
    // informacje o teście
    test_start(29, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 30: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów
//
void UTEST30(void)
{
    // informacje o teście
    test_start(30, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(56);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 31: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 60 bajtów
//
void UTEST31(void)
{
    // informacje o teście
    test_start(31, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 60 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(60);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 32: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów
//
void UTEST32(void)
{
    // informacje o teście
    test_start(32, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(64);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 33: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 68 bajtów
//
void UTEST33(void)
{
    // informacje o teście
    test_start(33, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 68 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(68);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 34: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów
//
void UTEST34(void)
{
    // informacje o teście
    test_start(34, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(79);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 35: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST35(void)
{
    // informacje o teście
    test_start(35, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(83);
    
    //
    // -----------
    //
    
        
                        char **output;
        
                        int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", &output);
                        test_error(err_code == -3, "Funkcja create_leading_word_cross() powinna zwrócić -3, a zwróciła %d", err_code);        
        
                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                       
                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 36: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST36(void)
{
    // informacje o teście
    test_start(36, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross("NOTICE", "FRIENDSHIP", NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 37: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST37(void)
{
    // informacje o teście
    test_start(37, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross("NOTICE", NULL, &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 38: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST38(void)
{
    // informacje o teście
    test_start(38, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross(NULL, "FRIENDSHIP", &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 39: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST39(void)
{
    // informacje o teście
    test_start(39, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output;

                    int err_code = create_leading_word_cross(NULL, NULL, &output);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 40: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST40(void)
{
    // informacje o teście
    test_start(40, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross(NULL, "FRIENDSHIP", NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 41: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST41(void)
{
    // informacje o teście
    test_start(41, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross("NOTICE", NULL, NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 42: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
//
void UTEST42(void)
{
    // informacje o teście
    test_start(42, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_leading_word_cross(NULL, NULL, NULL);
                    test_error(err_code == -1, "Funkcja create_leading_word_cross() powinna zwrócić -1, a zwróciła %d", err_code);        

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 43: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 438 bajtów
//
void UTEST43(void)
{
    // informacje o teście
    test_start(43, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 438 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(438);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"ROUTINE   TOWER", "E         H", "L         E", "A         M", "T         S", "I         E", "V         L", "E         V", "L         E", "Y         S"};
                const char *expected_array_first[] = {"ROUTINE", "E", "L", "A", "T", "I", "V", "E", "L", "Y"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("ROUTINE", "RELATIVELY", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 44: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 420 bajtów
//
void UTEST44(void)
{
    // informacje o teście
    test_start(44, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 420 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(420);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"TOWER   ROUTINE", "H       E", "E       L", "M       A", "S       T", "E       I", "L       V", "V       E", "E       L", "S       Y"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"ROUTINE", "E", "L", "A", "T", "I", "V", "E", "L", "Y"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "ROUTINE", "RELATIVELY", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 45: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 503 bajtów
//
void UTEST45(void)
{
    // informacje o teście
    test_start(45, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 503 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(503);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"XFQMWQCG   TOWER", "      O    H", "      N    E", "      S    M", "      T    S", "      I    E", "      T    L", "      U    V", "      T    E", "      E    S"};
                const char *expected_array_first[] = {"XFQMWQCG", "      O", "      N", "      S", "      T", "      I", "      T", "      U", "      T", "      E"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("XFQMWQCG", "CONSTITUTE", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 46: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 530 bajtów
//
void UTEST46(void)
{
    // informacje o teście
    test_start(46, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 530 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(530);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"TOWER   XFQMWQCG", "H             O", "E             N", "M             S", "S             T", "E             I", "L             T", "V             U", "E             T", "S             E"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"XFQMWQCG", "      O", "      N", "      S", "      T", "      I", "      T", "      U", "      T", "      E"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "XFQMWQCG", "CONSTITUTE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 47: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 647 bajtów
//
void UTEST47(void)
{
    // informacje o teście
    test_start(47, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 647 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(647);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"      I", "      N", "      D", "      I", "      V", "      I", "      D", "      U", "      A", "JZRXHTLW   TOWER", "           H", "           E", "           M", "           S", "           E", "           L", "           V", "           E", "           S"};
                const char *expected_array_first[] = {"      I", "      N", "      D", "      I", "      V", "      I", "      D", "      U", "      A", "JZRXHTLW"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("JZRXHTLW", "INDIVIDUAL", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 48: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 620 bajtów
//
void UTEST48(void)
{
    // informacje o teście
    test_start(48, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 620 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(620);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"              I", "              N", "              D", "              I", "              V", "              I", "              D", "              U", "              A", "TOWER   JZRXHTLW", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"      I", "      N", "      D", "      I", "      V", "      I", "      D", "      U", "      A", "JZRXHTLW"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "JZRXHTLW", "INDIVIDUAL", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 49: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 528 bajtów
//
void UTEST49(void)
{
    // informacje o teście
    test_start(49, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 528 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(528);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"I", "N", "D", "U", "S", "T", "R", "I", "A", "LIBRARY   TOWER", "          H", "          E", "          M", "          S", "          E", "          L", "          V", "          E", "          S"};
                const char *expected_array_first[] = {"I", "N", "D", "U", "S", "T", "R", "I", "A", "LIBRARY"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("LIBRARY", "INDUSTRIAL", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 50: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 510 bajtów
//
void UTEST50(void)
{
    // informacje o teście
    test_start(50, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 510 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(510);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"        I", "        N", "        D", "        U", "        S", "        T", "        R", "        I", "        A", "TOWER   LIBRARY", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"I", "N", "D", "U", "S", "T", "R", "I", "A", "LIBRARY"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "LIBRARY", "INDUSTRIAL", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 51: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 567 bajtów
//
void UTEST51(void)
{
    // informacje o teście
    test_start(51, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 567 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(567);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"   C", "   O", "   M", "   P", "   A", "   R", "   I", "KUBSCVYY   TOWER", "   O       H", "   N       E", "           M", "           S", "           E", "           L", "           V", "           E", "           S"};
                const char *expected_array_first[] = {"   C", "   O", "   M", "   P", "   A", "   R", "   I", "KUBSCVYY", "   O", "   N"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("KUBSCVYY", "COMPARISON", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 52: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów
//
void UTEST52(void)
{
    // informacje o teście
    test_start(52, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(546);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"           C", "           O", "           M", "           P", "           A", "           R", "           I", "TOWER   KUBSCVYY", "H          O", "E          N", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"   C", "   O", "   M", "   P", "   A", "   R", "   I", "KUBSCVYY", "   O", "   N"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "KUBSCVYY", "COMPARISON", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 53: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 282 bajtów
//
void UTEST53(void)
{
    // informacje o teście
    test_start(53, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 282 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(282);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"T   TOWER", "    H", "    E", "    M", "    S", "    E", "    L", "    V", "    E", "    S"};
                const char *expected_array_first[] = {"T"};
                const char *expected_array_second[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};

                int err_code = create_double_leading_word_cross("T", "T", "TOWER", "THEMSELVES", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 54: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 246 bajtów
//
void UTEST54(void)
{
    // informacje o teście
    test_start(54, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 246 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(246);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"TOWER   T", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_first[] = {"TOWER", "H", "E", "M", "S", "E", "L", "V", "E", "S"};
                const char *expected_array_second[] = {"T"};

                int err_code = create_double_leading_word_cross("TOWER", "THEMSELVES", "T", "T", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!10)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 10; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 10; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 10) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 55: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 398 bajtów
//
void UTEST55(void)
{
    // informacje o teście
    test_start(55, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 398 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(398);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"            T", "            E", "            R", "            R", "N   MXXWGPXKOKB", "            R", "            I", "            S", "            T"};
                const char *expected_array_first[] = {"N"};
                const char *expected_array_second[] = {"        T", "        E", "        R", "        R", "MXXWGPXKOKB", "        R", "        I", "        S", "        T"};

                int err_code = create_double_leading_word_cross("N", "N", "MXXWGPXKOKB", "TERRORIST", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!9)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 9; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 56: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 366 bajtów
//
void UTEST56(void)
{
    // informacje o teście
    test_start(56, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 366 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(366);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"        T", "        E", "        R", "        R", "MXXWGPXKOKB   N", "        R", "        I", "        S", "        T"};
                const char *expected_array_first[] = {"        T", "        E", "        R", "        R", "MXXWGPXKOKB", "        R", "        I", "        S", "        T"};
                const char *expected_array_second[] = {"N"};

                int err_code = create_double_leading_word_cross("MXXWGPXKOKB", "TERRORIST", "N", "N", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!9)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 9; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 1; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 1) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 57: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 663 bajtów
//
void UTEST57(void)
{
    // informacje o teście
    test_start(57, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 663 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(663);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"   E", "   M", "   E", "   R", "   G               T", "   E               E", "   N               R", "   C               R", "BUSYWSLY   MXXWGPXKOKB", "   G               R", "   Y               I", "   Z               S", "                   T"};
                const char *expected_array_first[] = {"   E", "   M", "   E", "   R", "   G", "   E", "   N", "   C", "BUSYWSLY", "   G", "   Y", "   Z"};
                const char *expected_array_second[] = {"        T", "        E", "        R", "        R", "MXXWGPXKOKB", "        R", "        I", "        S", "        T"};

                int err_code = create_double_leading_word_cross("BUSYWSLY", "EMERGENCYGYZ", "MXXWGPXKOKB", "TERRORIST", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!13)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 13; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 13) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 12; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 12) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 58: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 694 bajtów
//
void UTEST58(void)
{
    // informacje o teście
    test_start(58, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 694 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(694);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                 E", "                 M", "                 E", "                 R", "        T        G", "        E        E", "        R        N", "        R        C", "MXXWGPXKOKB   BUSYWSLY", "        R        G", "        I        Y", "        S        Z", "        T"};
                const char *expected_array_first[] = {"        T", "        E", "        R", "        R", "MXXWGPXKOKB", "        R", "        I", "        S", "        T"};
                const char *expected_array_second[] = {"   E", "   M", "   E", "   R", "   G", "   E", "   N", "   C", "BUSYWSLY", "   G", "   Y", "   Z"};

                int err_code = create_double_leading_word_cross("MXXWGPXKOKB", "TERRORIST", "BUSYWSLY", "EMERGENCYGYZ", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!13)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 13; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 13) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 12; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 12) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 59: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 672 bajtów
//
void UTEST59(void)
{
    // informacje o teście
    test_start(59, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 672 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(672);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                       M", "                       E", "EDHAOPRVSZKIJXR   INITIATIVE", "G                      S", "B                      U", "R                      R", "S                      E", "Z", "D", "Z", "Y", "S", "C", "W", "C", "H", "M", "I", "D"};
                const char *expected_array_first[] = {"EDHAOPRVSZKIJXR", "G", "B", "R", "S", "Z", "D", "Z", "Y", "S", "C", "W", "C", "H", "M", "I", "D"};
                const char *expected_array_second[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};

                int err_code = create_double_leading_word_cross("EDHAOPRVSZKIJXR", "EGBRSZDZYSCWCHMID", "INITIATIVE", "MEASURE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 60: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 752 bajtów
//
void UTEST60(void)
{
    // informacje o teście
    test_start(60, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 752 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(752);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"     M", "     E", "INITIATIVE   EDHAOPRVSZKIJXR", "     S       G", "     U       B", "     R       R", "     E       S", "             Z", "             D", "             Z", "             Y", "             S", "             C", "             W", "             C", "             H", "             M", "             I", "             D"};
                const char *expected_array_first[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};
                const char *expected_array_second[] = {"EDHAOPRVSZKIJXR", "G", "B", "R", "S", "Z", "D", "Z", "Y", "S", "C", "W", "C", "H", "M", "I", "D"};

                int err_code = create_double_leading_word_cross("INITIATIVE", "MEASURE", "EDHAOPRVSZKIJXR", "EGBRSZDZYSCWCHMID", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 61: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 782 bajtów
//
void UTEST61(void)
{
    // informacje o teście
    test_start(61, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 782 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(782);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"     L", "     O                 M", "     X                 E", "JITGPYCNZNAIWHH   INITIATIVE", "     X                 S", "     U                 U", "     F                 R", "     Y                 E", "     B", "     M", "     V", "     R", "     Q", "     V", "     Q", "     Y", "     Q"};
                const char *expected_array_first[] = {"     L", "     O", "     X", "JITGPYCNZNAIWHH", "     X", "     U", "     F", "     Y", "     B", "     M", "     V", "     R", "     Q", "     V", "     Q", "     Y", "     Q"};
                const char *expected_array_second[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};

                int err_code = create_double_leading_word_cross("JITGPYCNZNAIWHH", "LOXYXUFYBMVRQVQYQ", "INITIATIVE", "MEASURE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 62: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 882 bajtów
//
void UTEST62(void)
{
    // informacje o teście
    test_start(62, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 882 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(882);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                  L", "     M            O", "     E            X", "INITIATIVE   JITGPYCNZNAIWHH", "     S            X", "     U            U", "     R            F", "     E            Y", "                  B", "                  M", "                  V", "                  R", "                  Q", "                  V", "                  Q", "                  Y", "                  Q"};
                const char *expected_array_first[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};
                const char *expected_array_second[] = {"     L", "     O", "     X", "JITGPYCNZNAIWHH", "     X", "     U", "     F", "     Y", "     B", "     M", "     V", "     R", "     Q", "     V", "     Q", "     Y", "     Q"};

                int err_code = create_double_leading_word_cross("INITIATIVE", "MEASURE", "JITGPYCNZNAIWHH", "LOXYXUFYBMVRQVQYQ", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 63: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 886 bajtów
//
void UTEST63(void)
{
    // informacje o teście
    test_start(63, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 886 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(886);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"         B", "         C             M", "         F             E", "OJXKVKORJTROCKG   INITIATIVE", "         A             S", "         D             U", "         N             R", "         Q             E", "         D", "         I", "         A", "         U", "         N", "         L", "         D", "         P", "         S"};
                const char *expected_array_first[] = {"         B", "         C", "         F", "OJXKVKORJTROCKG", "         A", "         D", "         N", "         Q", "         D", "         I", "         A", "         U", "         N", "         L", "         D", "         P", "         S"};
                const char *expected_array_second[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};

                int err_code = create_double_leading_word_cross("OJXKVKORJTROCKG", "BCFTADNQDIAUNLDPS", "INITIATIVE", "MEASURE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 64: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1010 bajtów
//
void UTEST64(void)
{
    // informacje o teście
    test_start(64, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1010 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(1010);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                      B", "     M                C", "     E                F", "INITIATIVE   OJXKVKORJTROCKG", "     S                A", "     U                D", "     R                N", "     E                Q", "                      D", "                      I", "                      A", "                      U", "                      N", "                      L", "                      D", "                      P", "                      S"};
                const char *expected_array_first[] = {"     M", "     E", "INITIATIVE", "     S", "     U", "     R", "     E"};
                const char *expected_array_second[] = {"         B", "         C", "         F", "OJXKVKORJTROCKG", "         A", "         D", "         N", "         Q", "         D", "         I", "         A", "         U", "         N", "         L", "         D", "         P", "         S"};

                int err_code = create_double_leading_word_cross("INITIATIVE", "MEASURE", "OJXKVKORJTROCKG", "BCFTADNQDIAUNLDPS", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!17)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 17; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 7; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 7) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 17; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 17) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 65: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 726 bajtów
//
void UTEST65(void)
{
    // informacje o teście
    test_start(65, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 726 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(726);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"QHJCUCCJYQVIRFMVV   BGYSSMJFUJB", "T                    E", "W                    N", "Y                    E", "Z                    R", "Z                    A", "L                    L", "X                    L", "T                    Y", "A", "P", "N", "W", "T", "G", "W", "W", "N", "B"};
                const char *expected_array_first[] = {"QHJCUCCJYQVIRFMVV", "T", "W", "Y", "Z", "Z", "L", "X", "T", "A", "P", "N", "W", "T", "G", "W", "W", "N", "B"};
                const char *expected_array_second[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};

                int err_code = create_double_leading_word_cross("QHJCUCCJYQVIRFMVV", "QTWYZZLXTAPNWTGWWNB", "BGYSSMJFUJB", "GENERALLY", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 66: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 810 bajtów
//
void UTEST66(void)
{
    // informacje o teście
    test_start(66, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 810 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(810);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"BGYSSMJFUJB   QHJCUCCJYQVIRFMVV", " E            T", " N            W", " E            Y", " R            Z", " A            Z", " L            L", " L            X", " Y            T", "              A", "              P", "              N", "              W", "              T", "              G", "              W", "              W", "              N", "              B"};
                const char *expected_array_first[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};
                const char *expected_array_second[] = {"QHJCUCCJYQVIRFMVV", "T", "W", "Y", "Z", "Z", "L", "X", "T", "A", "P", "N", "W", "T", "G", "W", "W", "N", "B"};

                int err_code = create_double_leading_word_cross("BGYSSMJFUJB", "GENERALLY", "QHJCUCCJYQVIRFMVV", "QTWYZZLXTAPNWTGWWNB", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 67: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 838 bajtów
//
void UTEST67(void)
{
    // informacje o teście
    test_start(67, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 838 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(838);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"VFEODDKDIHGNPMCZB   BGYSSMJFUJB", "    B                E", "    B                N", "    U                E", "    R                R", "    D                A", "    W                L", "    Z                L", "    Y                Y", "    R", "    S", "    J", "    I", "    Y", "    Q", "    W", "    K", "    U", "    C"};
                const char *expected_array_first[] = {"VFEODDKDIHGNPMCZB", "    B", "    B", "    U", "    R", "    D", "    W", "    Z", "    Y", "    R", "    S", "    J", "    I", "    Y", "    Q", "    W", "    K", "    U", "    C"};
                const char *expected_array_second[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};

                int err_code = create_double_leading_word_cross("VFEODDKDIHGNPMCZB", "DBBURDWZYRSJIYQWKUC", "BGYSSMJFUJB", "GENERALLY", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 68: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 954 bajtów
//
void UTEST68(void)
{
    // informacje o teście
    test_start(68, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 954 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(954);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"BGYSSMJFUJB   VFEODDKDIHGNPMCZB", " E                B", " N                B", " E                U", " R                R", " A                D", " L                W", " L                Z", " Y                Y", "                  R", "                  S", "                  J", "                  I", "                  Y", "                  Q", "                  W", "                  K", "                  U", "                  C"};
                const char *expected_array_first[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};
                const char *expected_array_second[] = {"VFEODDKDIHGNPMCZB", "    B", "    B", "    U", "    R", "    D", "    W", "    Z", "    Y", "    R", "    S", "    J", "    I", "    Y", "    Q", "    W", "    K", "    U", "    C"};

                int err_code = create_double_leading_word_cross("BGYSSMJFUJB", "GENERALLY", "VFEODDKDIHGNPMCZB", "DBBURDWZYRSJIYQWKUC", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 69: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 978 bajtów
//
void UTEST69(void)
{
    // informacje o teście
    test_start(69, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 978 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(978);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"         A", "         B", "         I", "         P", "         U", "         W", "         U", "         Q", "JEDDFFXEJHLGRQKET   BGYSSMJFUJB", "         Z           E", "         Y           N", "         M           E", "         V           R", "         B           A", "         O           L", "         T           L", "         L           Y", "         K", "         N"};
                const char *expected_array_first[] = {"         A", "         B", "         I", "         P", "         U", "         W", "         U", "         Q", "JEDDFFXEJHLGRQKET", "         Z", "         Y", "         M", "         V", "         B", "         O", "         T", "         L", "         K", "         N"};
                const char *expected_array_second[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};

                int err_code = create_double_leading_word_cross("JEDDFFXEJHLGRQKET", "ABIPUWUQHZYMVBOTLKN", "BGYSSMJFUJB", "GENERALLY", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 70: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1134 bajtów
//
void UTEST70(void)
{
    // informacje o teście
    test_start(70, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1134 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(1134);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"                       A", "                       B", "                       I", "                       P", "                       U", "                       W", "                       U", "                       Q", "BGYSSMJFUJB   JEDDFFXEJHLGRQKET", " E                     Z", " N                     Y", " E                     M", " R                     V", " A                     B", " L                     O", " L                     T", " Y                     L", "                       K", "                       N"};
                const char *expected_array_first[] = {"BGYSSMJFUJB", " E", " N", " E", " R", " A", " L", " L", " Y"};
                const char *expected_array_second[] = {"         A", "         B", "         I", "         P", "         U", "         W", "         U", "         Q", "JEDDFFXEJHLGRQKET", "         Z", "         Y", "         M", "         V", "         B", "         O", "         T", "         L", "         K", "         N"};

                int err_code = create_double_leading_word_cross("BGYSSMJFUJB", "GENERALLY", "JEDDFFXEJHLGRQKET", "ABIPUWUQHZYMVBOTLKN", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!19)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 19; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 19; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 19) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 71: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 513 bajtów
//
void UTEST71(void)
{
    // informacje o teście
    test_start(71, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 513 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(513);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"              O", "              P", "              P", "              O", "              S", "ACTIVE   KQRAKITOXA", " R            T", " I            E", " T", " I", " C", " I", " S", " M"};
                const char *expected_array_first[] = {"ACTIVE", " R", " I", " T", " I", " C", " I", " S", " M"};
                const char *expected_array_second[] = {"     O", "     P", "     P", "     O", "     S", "KQRAKITOXA", "     T", "     E"};

                int err_code = create_double_leading_word_cross("ACTIVE", "CRITICISM", "KQRAKITOXA", "OPPOSITE", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!14)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 14; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 72: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów
//
void UTEST72(void)
{
    // informacje o teście
    test_start(72, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(546);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"     O", "     P", "     P", "     O", "     S", "KQRAKITOXA   ACTIVE", "     T        R", "     E        I", "              T", "              I", "              C", "              I", "              S", "              M"};
                const char *expected_array_first[] = {"     O", "     P", "     P", "     O", "     S", "KQRAKITOXA", "     T", "     E"};
                const char *expected_array_second[] = {"ACTIVE", " R", " I", " T", " I", " C", " I", " S", " M"};

                int err_code = create_double_leading_word_cross("KQRAKITOXA", "OPPOSITE", "ACTIVE", "CRITICISM", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!14)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 14; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 14) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 9; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 9) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 73: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów
//
void UTEST73(void)
{
    // informacje o teście
    test_start(73, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(137);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("GRADUATE", "ELECTION", "PROVISION", "HEALTH", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 74: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów
//
void UTEST74(void)
{
    // informacje o teście
    test_start(74, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(274);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};

                int err_code = create_double_leading_word_cross("PROVISION", "HEALTH", "GRADUATE", "ELECTION", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 75: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 356 bajtów
//
void UTEST75(void)
{
    // informacje o teście
    test_start(75, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 356 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(356);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"      E", "      L", "      E", "      C    F", "GRADUATE   I", "      I    B", "      O    E", "      N    R"};
                const char *expected_array_first[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};
                const char *expected_array_second[] = {"F", "I", "B", "E", "R"};

                int err_code = create_double_leading_word_cross("GRADUATE", "ELECTION", "I", "FIBER", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!8)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 8; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 5; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 5) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 76: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 364 bajtów
//
void UTEST76(void)
{
    // informacje o teście
    test_start(76, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 364 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(364);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"          E", "          L", "          E", "F         C", "I   GRADUATE", "B         I", "E         O", "R         N"};
                const char *expected_array_first[] = {"F", "I", "B", "E", "R"};
                const char *expected_array_second[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};

                int err_code = create_double_leading_word_cross("I", "FIBER", "GRADUATE", "ELECTION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!8)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 8; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 5; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 5) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 77: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów
//
void UTEST77(void)
{
    // informacje o teście
    test_start(77, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(137);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("GRADUATE", "ELECTION", "REINFORCE", "A", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 78: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów
//
void UTEST78(void)
{
    // informacje o teście
    test_start(78, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(274);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};

                int err_code = create_double_leading_word_cross("REINFORCE", "A", "GRADUATE", "ELECTION", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 79: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 797 bajtów
//
void UTEST79(void)
{
    // informacje o teście
    test_start(79, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 797 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(797);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"               Y", "               P", "      E        B", "      L        D", "      E        X", "      C        K", "GRADUATE   AFRICANAMERICAN", "      I        Y", "      O        D", "      N        D", "               U", "               V", "               O", "               N", "               B", "               U"};
                const char *expected_array_first[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};
                const char *expected_array_second[] = {"    Y", "    P", "    B", "    D", "    X", "    K", "AFRICANAMERICAN", "    Y", "    D", "    D", "    U", "    V", "    O", "    N", "    B", "    U"};

                int err_code = create_double_leading_word_cross("GRADUATE", "ELECTION", "AFRICANAMERICAN", "YPBDXKCYDDUVONBU", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 16; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 80: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 772 bajtów
//
void UTEST80(void)
{
    // informacje o teście
    test_start(80, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 772 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(772);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {"    Y", "    P", "    B                   E", "    D                   L", "    X                   E", "    K                   C", "AFRICANAMERICAN   GRADUATE", "    Y                   I", "    D                   O", "    D                   N", "    U", "    V", "    O", "    N", "    B", "    U"};
                const char *expected_array_first[] = {"    Y", "    P", "    B", "    D", "    X", "    K", "AFRICANAMERICAN", "    Y", "    D", "    D", "    U", "    V", "    O", "    N", "    B", "    U"};
                const char *expected_array_second[] = {"      E", "      L", "      E", "      C", "GRADUATE", "      I", "      O", "      N"};

                int err_code = create_double_leading_word_cross("AFRICANAMERICAN", "YPBDXKCYDDUVONBU", "GRADUATE", "ELECTION", &output, &output_first, &output_second);
                test_error(err_code == 0, "Funkcja create_double_leading_word_cross() powinna zwrócić 0, a zwróciła %d", err_code);        

                if (!16)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 16; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 16; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 16) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 8; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 8) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 81: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 969 bajtów
//
void UTEST81(void)
{
    // informacje o teście
    test_start(81, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 969 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(969);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {" W", " L", " X", " D", " J", " T", " H", " Y", " V", "AFRICANAMERICAN", " Z", " R", " U", " G", " S", " H"};

                int err_code = create_double_leading_word_cross("VVRXGZWMVMAHMREQ", "INFCCBUIDOIKBBCFCSJ", "AFRICANAMERICAN", "WLXDJTHYVFZRUGSH", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 82: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST82(void)
{
    // informacje o teście
    test_start(82, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(197);
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {" W", " L", " X", " D", " J", " T", " H", " Y", " V", "AFRICANAMERICAN", " Z", " R", " U", " G", " S", " H"};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("AFRICANAMERICAN", "WLXDJTHYVFZRUGSH", "VVRXGZWMVMAHMREQ", "INFCCBUIDOIKBBCFCSJ", &output, &output_first, &output_second);
                test_error(err_code == 2, "Funkcja create_double_leading_word_cross() powinna zwrócić 2, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 83: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST83(void)
{
    // informacje o teście
    test_start(83, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("PNKDUT", "quite", "XBPZXI", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 84: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST84(void)
{
    // informacje o teście
    test_start(84, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("xbpzxi", "HABIT", "PNKDUT", "QUITE", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 85: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST85(void)
{
    // informacje o teście
    test_start(85, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("PNKDUT", "QUITE", "xbpzxi", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 86: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST86(void)
{
    // informacje o teście
    test_start(86, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("XBPZXI", "HABIT", "PNKDUT", "quite", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 87: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST87(void)
{
    // informacje o teście
    test_start(87, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("QUITE", "PNKDUT\n", "XBPZXI", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 88: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST88(void)
{
    // informacje o teście
    test_start(88, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("QUITE\n", "PNKDUT", "XBPZXI", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 89: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST89(void)
{
    // informacje o teście
    test_start(89, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("XBPZXI", "HABIT", "QUITE", "PNKDUT\n", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 90: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST90(void)
{
    // informacje o teście
    test_start(90, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("XBPZXI", "HABIT", "QUITE\n", "PNKDUT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 91: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST91(void)
{
    // informacje o teście
    test_start(91, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("QUIuTE", "PNKDUT", "XBPZXI", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 92: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST92(void)
{
    // informacje o teście
    test_start(92, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("XBPZXI", "HABIT", "QUIuTE", "PNKDUT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 93: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST93(void)
{
    // informacje o teście
    test_start(93, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("QUITE", "PNjKDUT", "XBPZXI", "HABIT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 94: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
//
void UTEST94(void)
{
    // informacje o teście
    test_start(94, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                char **output, **output_first, **output_second;

                const char *expected_array[] = {""};
                const char *expected_array_first[] = {""};
                const char *expected_array_second[] = {""};

                int err_code = create_double_leading_word_cross("XBPZXI", "HABIT", "QUITE", "PNjKDUT", &output, &output_first, &output_second);
                test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);        

                if (!0)
                    test_error(output == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output NULL");        
                else
                {
                    test_error(output != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output adres przydzielonej pamięci, a przypisała NULL");        
                    test_error(output_first != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_first adres przydzielonej pamięci, a przypisała NULL");
                    test_error(output_second != NULL, "Funkcja create_double_leading_word_cross() powinna przypisać pod zmienną output_second adres przydzielonej pamięci, a przypisała NULL");        
            
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)

                    for (int i = 0; i < 0; ++i)
                        test_error(strcmp(expected_array[i], output[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array[i], output[i]);        

                    test_error(*(output + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_first[i], output_first[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_first[i], output_first[i]);        
            
                            test_error(*(output_first + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        
            
                    for (int i = 0; i < 0; ++i)
                                test_error(strcmp(expected_array_second[i], output_second[i]) == 0, "Funkcja create_double_leading_word_cross() niepoprawnie podzieliła wyrazy, pod indeksem %d powinno być %s, a jest %s", i, expected_array_second[i], output_second[i]);        

                    test_error(*(output_second + 0) == NULL, "Funkcja create_double_leading_word_cross() powinna przypisać na końcu tablicy wartość NULL");        

                    destroy(output);
                    destroy(output_first);
                    destroy(output_second);

                }

                test_no_heap_leakage();
                onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 95: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
//
void UTEST95(void)
{
    // informacje o teście
    test_start(95, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 96: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 96 bajtów
//
void UTEST96(void)
{
    // informacje o teście
    test_start(96, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 96 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(96);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 97: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 113 bajtów
//
void UTEST97(void)
{
    // informacje o teście
    test_start(97, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 113 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(113);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 98: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów
//
void UTEST98(void)
{
    // informacje o teście
    test_start(98, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(130);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 99: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 147 bajtów
//
void UTEST99(void)
{
    // informacje o teście
    test_start(99, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 147 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(147);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 100: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 164 bajtów
//
void UTEST100(void)
{
    // informacje o teście
    test_start(100, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 164 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(164);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 101: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów
//
void UTEST101(void)
{
    // informacje o teście
    test_start(101, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(181);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 102: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 198 bajtów
//
void UTEST102(void)
{
    // informacje o teście
    test_start(102, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 198 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(198);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 103: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 215 bajtów
//
void UTEST103(void)
{
    // informacje o teście
    test_start(103, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 215 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(215);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 104: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 232 bajtów
//
void UTEST104(void)
{
    // informacje o teście
    test_start(104, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 232 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(232);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 105: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów
//
void UTEST105(void)
{
    // informacje o teście
    test_start(105, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(250);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 106: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 267 bajtów
//
void UTEST106(void)
{
    // informacje o teście
    test_start(106, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 267 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(267);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 107: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 347 bajtów
//
void UTEST107(void)
{
    // informacje o teście
    test_start(107, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 347 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(347);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 108: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 352 bajtów
//
void UTEST108(void)
{
    // informacje o teście
    test_start(108, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 352 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(352);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 109: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 357 bajtów
//
void UTEST109(void)
{
    // informacje o teście
    test_start(109, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 357 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(357);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 110: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 362 bajtów
//
void UTEST110(void)
{
    // informacje o teście
    test_start(110, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 362 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(362);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 111: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 367 bajtów
//
void UTEST111(void)
{
    // informacje o teście
    test_start(111, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 367 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(367);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 112: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 372 bajtów
//
void UTEST112(void)
{
    // informacje o teście
    test_start(112, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 372 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(372);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 113: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 377 bajtów
//
void UTEST113(void)
{
    // informacje o teście
    test_start(113, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 377 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(377);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 114: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 387 bajtów
//
void UTEST114(void)
{
    // informacje o teście
    test_start(114, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 387 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(387);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 115: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 392 bajtów
//
void UTEST115(void)
{
    // informacje o teście
    test_start(115, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 392 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(392);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 116: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 480 bajtów
//
void UTEST116(void)
{
    // informacje o teście
    test_start(116, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 480 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(480);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 117: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 485 bajtów
//
void UTEST117(void)
{
    // informacje o teście
    test_start(117, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 485 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(485);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 118: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 490 bajtów
//
void UTEST118(void)
{
    // informacje o teście
    test_start(118, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 490 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(490);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 119: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 495 bajtów
//
void UTEST119(void)
{
    // informacje o teście
    test_start(119, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 495 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(495);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 120: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 500 bajtów
//
void UTEST120(void)
{
    // informacje o teście
    test_start(120, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 500 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(500);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 121: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 505 bajtów
//
void UTEST121(void)
{
    // informacje o teście
    test_start(121, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 505 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(505);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 122: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 510 bajtów
//
void UTEST122(void)
{
    // informacje o teście
    test_start(122, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 510 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(510);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 123: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 515 bajtów
//
void UTEST123(void)
{
    // informacje o teście
    test_start(123, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 515 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(515);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 124: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 520 bajtów
//
void UTEST124(void)
{
    // informacje o teście
    test_start(124, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 520 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(520);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 125: Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST125(void)
{
    // informacje o teście
    test_start(125, "Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(526);
    
    //
    // -----------
    //
    

                        char **output, **output_first, **output_second;

                        int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "BENCH", "PYKQHVMPCQ", &output, &output_first, &output_second);
                        test_error(err_code == 3, "Funkcja create_leading_word_cross() powinna zwrócić 3, a zwróciła %d", err_code);

                        test_error(output == NULL, "Funkcja create_leading_word_cross() powinna przypisać pod zmienną output NULL");

                        test_no_heap_leakage();
                        onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                    
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 126: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST126(void)
{
    // informacje o teście
    test_start(126, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "PERMANENT", "CVOLYXMCQ", NULL, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 127: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST127(void)
{
    // informacje o teście
    test_start(127, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, "PERMANENT", "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 128: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST128(void)
{
    // informacje o teście
    test_start(128, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", "PERMANENT", "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 129: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST129(void)
{
    // informacje o teście
    test_start(129, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, "PERMANENT", "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 130: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST130(void)
{
    // informacje o teście
    test_start(130, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", "PERMANENT", "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 131: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST131(void)
{
    // informacje o teście
    test_start(131, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, "PERMANENT", "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 132: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST132(void)
{
    // informacje o teście
    test_start(132, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, "PERMANENT", "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 133: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST133(void)
{
    // informacje o teście
    test_start(133, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", "PERMANENT", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 134: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST134(void)
{
    // informacje o teście
    test_start(134, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, "PERMANENT", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 135: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST135(void)
{
    // informacje o teście
    test_start(135, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", "PERMANENT", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 136: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST136(void)
{
    // informacje o teście
    test_start(136, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, "PERMANENT", NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 137: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST137(void)
{
    // informacje o teście
    test_start(137, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", "PERMANENT", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 138: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST138(void)
{
    // informacje o teście
    test_start(138, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, "PERMANENT", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 139: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST139(void)
{
    // informacje o teście
    test_start(139, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, "PERMANENT", NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 140: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST140(void)
{
    // informacje o teście
    test_start(140, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", NULL, "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 141: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST141(void)
{
    // informacje o teście
    test_start(141, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, NULL, "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 142: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST142(void)
{
    // informacje o teście
    test_start(142, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", NULL, "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 143: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST143(void)
{
    // informacje o teście
    test_start(143, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, "CVOLYXMCQ", &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 144: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST144(void)
{
    // informacje o teście
    test_start(144, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", NULL, "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 145: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST145(void)
{
    // informacje o teście
    test_start(145, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, NULL, "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 146: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST146(void)
{
    // informacje o teście
    test_start(146, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, "CVOLYXMCQ", NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 147: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST147(void)
{
    // informacje o teście
    test_start(147, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", "CVOLYXMCQ", NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 148: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST148(void)
{
    // informacje o teście
    test_start(148, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 149: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST149(void)
{
    // informacje o teście
    test_start(149, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 150: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST150(void)
{
    // informacje o teście
    test_start(150, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output, **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, &output, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 151: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST151(void)
{
    // informacje o teście
    test_start(151, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, "CVOLYXMCQ", NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 152: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST152(void)
{
    // informacje o teście
    test_start(152, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross("PERMANENT", NULL, NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 153: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST153(void)
{
    // informacje o teście
    test_start(153, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, NULL, NULL, NULL);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 154: Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
//
void UTEST154(void)
{
    // informacje o teście
    test_start(154, "Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    
    //
    // -----------
    //
    

                    char **output_first, **output_second;

                    int err_code = create_double_leading_word_cross(NULL, NULL, NULL, NULL, NULL, &output_first, &output_second);
                    test_error(err_code == 1, "Funkcja create_double_leading_word_cross() powinna zwrócić 1, a zwróciła %d", err_code);

                    test_no_heap_leakage();
                    onerror_terminate(); // przerwanie wszystkich testów jednostkowych (np. coś jest mocno nie tak z kodem)
                
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}



//
//  Test 1: Reakcja na brak pamięci; limit ustawiono na 0 bajtów
//
void MTEST1(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(1, "Reakcja na brak pamięci; limit ustawiono na 0 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(0);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 2: Reakcja na brak pamięci; limit ustawiono na 11 bajtów
//
void MTEST2(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(2, "Reakcja na brak pamięci; limit ustawiono na 11 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(11);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 3: Reakcja na brak pamięci; limit ustawiono na 22 bajtów
//
void MTEST3(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(3, "Reakcja na brak pamięci; limit ustawiono na 22 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(22);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 4: Reakcja na brak pamięci; limit ustawiono na 33 bajtów
//
void MTEST4(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(4, "Reakcja na brak pamięci; limit ustawiono na 33 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(33);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 5: Reakcja na brak pamięci; limit ustawiono na 44 bajtów
//
void MTEST5(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(5, "Reakcja na brak pamięci; limit ustawiono na 44 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(44);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 6: Reakcja na brak pamięci; limit ustawiono na 126 bajtów
//
void MTEST6(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(6, "Reakcja na brak pamięci; limit ustawiono na 126 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(126);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 7: Reakcja na brak pamięci; limit ustawiono na 207 bajtów
//
void MTEST7(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(7, "Reakcja na brak pamięci; limit ustawiono na 207 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(207);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 8: Reakcja na brak pamięci; limit ustawiono na 325 bajtów
//
void MTEST8(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(8, "Reakcja na brak pamięci; limit ustawiono na 325 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(325);
    
    //
    // -----------
    //
    
                printf("***START***\n");
                int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
                printf("\n***END***\n");
                test_error(ret_code == 8, "Funkcja main zakończyła się kodem %d a powinna 8", ret_code);
                test_no_heap_leakage();
            
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}

//
//  Test 9: Reakcja na brak pamięci; limit ustawiono na 336 bajtów
//
void MTEST9(int argc, char** argv, char** envp)
{
    // informacje o teście
    test_start(9, "Reakcja na brak pamięci; limit ustawiono na 336 bajtów", __LINE__);

    // uwarunkowanie zasobów - pamięci, itd...
    test_file_write_limit_setup(33554432);
    rldebug_reset_limits();
    rldebug_heap_set_global_limit(336);
    
    //
    // -----------
    //
    
            printf("***START***\n");
            int ret_code = rdebug_call_main(tested_main, argc, argv, envp);
            printf("\n***END***\n");
            test_error(ret_code == 0, "Funkcja main zakończyła się kodem %d a powinna 0", ret_code);
            test_no_heap_leakage();
        
    //
    // -----------
    //

    // przywrócenie podstawowych parametów przydzielania zasobów (jeśli to tylko możliwe)
    rldebug_reset_limits();
    test_file_write_limit_restore();
    
    test_ok();
}


enum run_mode_t { rm_normal_with_rld = 0, rm_unit_test = 1, rm_main_test = 2 };

int __wrap_main(volatile int _argc, char** _argv, char** _envp)
{
    int volatile vargc = _argc;
    char ** volatile vargv = _argv, ** volatile venvp = _envp;
    volatile enum run_mode_t run_mode = rm_unit_test; // -1
    volatile int selected_test = -1;

    if (vargc > 1)
    {
        char* smode = strtok(vargv[1], ",");
        char* stest = strtok(NULL, "");
        char *errptr = NULL;
        run_mode = (enum run_mode_t)strtol(smode, &errptr, 10);
        if (*errptr == '\x0')
        {
            memmove(vargv + 1, vargv + 2, sizeof(char*) * (vargc - 1));
            vargc--;

            if (stest != NULL)
            {
                int val = (int)strtol(stest, &errptr, 10);
                if (*errptr == '\x0')
                    selected_test = val;
            }
        }
    }

    // printf("runmode=%d; selected_test=%d\n", run_mode, selected_test);

    // inicjuj testy jednostkowe
    unit_test_init(run_mode, "unit_test_v2.c");
    test_limit_init();
    rldebug_set_reported_severity_level(MSL_FAILURE);

    if (run_mode == rm_normal_with_rld)
    {
        // konfiguracja ograniczników
        rldebug_reset_limits();
        

        // uruchom funkcję main Studenta a potem wyświetl podsumowanie sterty i zasobów
        volatile int ret_code = rdebug_call_main(tested_main, vargc, vargv, venvp);

        rldebug_reset_limits();
        

        int leaks_detected = rldebug_show_leaked_resources(0);
        if (leaks_detected)
            raise(SIGHEAP);

        return ret_code;
    }

    
    if (run_mode == rm_unit_test)
    {
        test_title("Testy jednostkowe");

        void (*pfcn[])(void) =
        { 
            UTEST1, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 114 bajtów
            UTEST2, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 169 bajtów
            UTEST3, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 168 bajtów
            UTEST4, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 115 bajtów
            UTEST5, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 132 bajtów
            UTEST6, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 18 bajtów
            UTEST7, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów
            UTEST8, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 27 bajtów
            UTEST9, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 26 bajtów
            UTEST10, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 118 bajtów
            UTEST11, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów
            UTEST12, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 119 bajtów
            UTEST13, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 86 bajtów
            UTEST14, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 110 bajtów
            UTEST15, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 44 bajtów
            UTEST16, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 52 bajtów
            UTEST17, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 230 bajtów
            UTEST18, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST19, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST20, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST21, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST22, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST23, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST24, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST25, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST26, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST27, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST28, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 231 bajtów
            UTEST29, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
            UTEST30, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 56 bajtów
            UTEST31, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 60 bajtów
            UTEST32, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 64 bajtów
            UTEST33, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 68 bajtów
            UTEST34, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 79 bajtów
            UTEST35, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST36, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST37, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST38, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST39, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST40, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST41, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST42, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 83 bajtów
            UTEST43, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 438 bajtów
            UTEST44, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 420 bajtów
            UTEST45, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 503 bajtów
            UTEST46, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 530 bajtów
            UTEST47, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 647 bajtów
            UTEST48, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 620 bajtów
            UTEST49, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 528 bajtów
            UTEST50, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 510 bajtów
            UTEST51, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 567 bajtów
            UTEST52, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów
            UTEST53, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 282 bajtów
            UTEST54, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 246 bajtów
            UTEST55, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 398 bajtów
            UTEST56, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 366 bajtów
            UTEST57, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 663 bajtów
            UTEST58, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 694 bajtów
            UTEST59, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 672 bajtów
            UTEST60, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 752 bajtów
            UTEST61, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 782 bajtów
            UTEST62, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 882 bajtów
            UTEST63, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 886 bajtów
            UTEST64, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1010 bajtów
            UTEST65, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 726 bajtów
            UTEST66, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 810 bajtów
            UTEST67, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 838 bajtów
            UTEST68, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 954 bajtów
            UTEST69, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 978 bajtów
            UTEST70, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 1134 bajtów
            UTEST71, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 513 bajtów
            UTEST72, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 546 bajtów
            UTEST73, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów
            UTEST74, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów
            UTEST75, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 356 bajtów
            UTEST76, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 364 bajtów
            UTEST77, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 137 bajtów
            UTEST78, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 274 bajtów
            UTEST79, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 797 bajtów
            UTEST80, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 772 bajtów
            UTEST81, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 969 bajtów
            UTEST82, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST83, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST84, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST85, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST86, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST87, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST88, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST89, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST90, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST91, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST92, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST93, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST94, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 197 bajtów
            UTEST95, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 0 bajtów
            UTEST96, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 96 bajtów
            UTEST97, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 113 bajtów
            UTEST98, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 130 bajtów
            UTEST99, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 147 bajtów
            UTEST100, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 164 bajtów
            UTEST101, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 181 bajtów
            UTEST102, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 198 bajtów
            UTEST103, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 215 bajtów
            UTEST104, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 232 bajtów
            UTEST105, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 250 bajtów
            UTEST106, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 267 bajtów
            UTEST107, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 347 bajtów
            UTEST108, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 352 bajtów
            UTEST109, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 357 bajtów
            UTEST110, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 362 bajtów
            UTEST111, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 367 bajtów
            UTEST112, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 372 bajtów
            UTEST113, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 377 bajtów
            UTEST114, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 387 bajtów
            UTEST115, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 392 bajtów
            UTEST116, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 480 bajtów
            UTEST117, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 485 bajtów
            UTEST118, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 490 bajtów
            UTEST119, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 495 bajtów
            UTEST120, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 500 bajtów
            UTEST121, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 505 bajtów
            UTEST122, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 510 bajtów
            UTEST123, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 515 bajtów
            UTEST124, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 520 bajtów
            UTEST125, // Sprawdzanie poprawności działania funkcji create_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST126, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST127, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST128, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST129, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST130, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST131, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST132, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST133, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST134, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST135, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST136, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST137, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST138, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST139, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST140, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST141, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST142, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST143, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST144, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST145, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST146, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST147, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST148, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST149, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST150, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST151, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST152, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST153, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            UTEST154, // Sprawdzanie poprawności działania funkcji create_double_leading_word_cross - limit pamięci ustawiony na 526 bajtów
            NULL
        };

        for (int idx = 0; pfcn[idx] != NULL && !test_get_session_termination_flag(); idx++)
        {
            if (selected_test == -1 || selected_test == idx + 1)
                pfcn[idx]();

            // limit niezaliczonych testów, po jakim testy jednostkowe zostaną przerwane
            if (test_session_get_fail_count() >= 1000)
                test_terminate_session();
        }


        test_title("RLDebug :: Analiza wycieku zasobów");
        // sprawdź wycieki pamięci
        int leaks_detected = rldebug_show_leaked_resources(1);
        test_set_session_leaks(leaks_detected);

        // poinformuj serwer Mrówka o wyniku testu - podsumowanie
        test_title("Podsumowanie");
        if (selected_test == -1)
            test_summary(154); // wszystkie testy muszą zakończyć się sukcesem
        else
            test_summary(1); // tylko jeden (selected_test) test musi zakończyć się  sukcesem
        return EXIT_SUCCESS;
    }
    

    if (run_mode == rm_main_test)
    {
        test_title("Testy funkcji main()");

        void (*pfcn[])(int, char**, char**) =
        { 
            MTEST1, // Reakcja na brak pamięci; limit ustawiono na 0 bajtów
            MTEST2, // Reakcja na brak pamięci; limit ustawiono na 11 bajtów
            MTEST3, // Reakcja na brak pamięci; limit ustawiono na 22 bajtów
            MTEST4, // Reakcja na brak pamięci; limit ustawiono na 33 bajtów
            MTEST5, // Reakcja na brak pamięci; limit ustawiono na 44 bajtów
            MTEST6, // Reakcja na brak pamięci; limit ustawiono na 126 bajtów
            MTEST7, // Reakcja na brak pamięci; limit ustawiono na 207 bajtów
            MTEST8, // Reakcja na brak pamięci; limit ustawiono na 325 bajtów
            MTEST9, // Reakcja na brak pamięci; limit ustawiono na 336 bajtów
            NULL
        };

        for (volatile int idx = 0; pfcn[idx] != NULL && !test_get_session_termination_flag(); idx++)
        {
            if (selected_test == -1 || selected_test == idx + 1)
                pfcn[idx](vargc, vargv, venvp);

            // limit niezaliczonych testów, po jakim testy jednostkowe zostaną przerwane
            if (test_session_get_fail_count() >= 1000)
                test_terminate_session();
        }


        test_title("RLDebug :: Analiza wycieku zasobów");
        // sprawdź wycieki pamięci
        int leaks_detected = rldebug_show_leaked_resources(1);
        test_set_session_leaks(leaks_detected);

        // poinformuj serwer Mrówka o wyniku testu - podsumowanie
        test_title("Podsumowanie");
        if (selected_test == -1)
            test_summary(9); // wszystkie testy muszą zakończyć się sukcesem
        else
            test_summary(1); // tylko jeden (selected_test) test musi zakończyć się  sukcesem

        return EXIT_SUCCESS;
    }

    printf("*** Nieznana wartość RunMode: %d", (int)run_mode);
    abort();
}
